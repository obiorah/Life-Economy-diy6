{"version":3,"file":"transfer-Be-p_g6R.js","sources":["../../../app/routes/transfer.tsx"],"sourcesContent":["import type { MetaFunction, ActionFunctionArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, useActionData, useNavigation } from \"@remix-run/react\";\nimport { useState, useEffect, useMemo } from \"react\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Life Economy - Transfer ESSENCE\" },\n    { name: \"description\", content: \"Transfer ESSENCE to other users\" },\n  ];\n};\n\n// Define simple types for clarity\ntype User = {\n  id: string;\n  name: string;\n  balance: number;\n  avatar: string;\n};\n\ntype Transaction = {\n  id: string;\n  amount: number;\n  recipientId: string;\n  recipientName: string;\n  note?: string;\n  timestamp: string;\n};\n\n// Generate dummy users\nconst generateUsers = (): User[] => {\n  const names = [\"Alex\", \"Jamie\", \"Taylor\", \"Morgan\", \"Casey\", \"Riley\", \"Jordan\", \"Quinn\"];\n  const surnames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Garcia\", \"Miller\", \"Davis\"];\n\n  return Array.from({ length: 8 }, (_, i) => ({\n    id: `user${i + 1000}`,\n    name: `${names[i % names.length]} ${surnames[i % surnames.length]}`,\n    balance: Math.floor(Math.random() * 10000) + 500,\n    avatar: `https://i.pravatar.cc/150?img=${i + 10}`\n  }));\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const amount = Number(formData.get(\"amount\"));\n  const recipientId = formData.get(\"recipient\") as string;\n  const note = formData.get(\"note\") as string;\n\n  // Validate inputs\n  if (!amount || amount <= 0) {\n    return json({ error: \"Please enter a valid amount\" }, { status: 400 });\n  }\n\n  if (!recipientId) {\n    return json({ error: \"Please select a recipient\" }, { status: 400 });\n  }\n\n  // Get recipient name for success message\n  const users = generateUsers();\n  const recipient = users.find(u => u.id === recipientId);\n\n  // In a real app, this would interact with your backend\n  return json({\n    success: true,\n    message: `Successfully transferred ${amount} ESSENCE to ${recipient?.name || recipientId}`,\n    transaction: {\n      id: `tx${Date.now()}`,\n      amount,\n      recipientId,\n      recipientName: recipient?.name || recipientId,\n      note,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nexport default function Transfer() {\n  const [users, setUsers] = useState<User[]>(generateUsers());\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"\"); // For controlled select\n  const [recentTransfers, setRecentTransfers] = useState<Transaction[]>([]);\n  const [formKey, setFormKey] = useState<number>(0); // Used to reset form\n  const [searchTerm, setSearchTerm] = useState<string>(\"\"); // State for search term\n  const actionData = useActionData<typeof action>();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === \"submitting\";\n\n  // Filter users based on search term\n  const filteredUsers = useMemo(() => {\n    if (!searchTerm) {\n      return users;\n    }\n    const lowerCaseSearchTerm = searchTerm.toLowerCase();\n    return users.filter(user =>\n      user.name.toLowerCase().includes(lowerCaseSearchTerm) ||\n      user.id.toLowerCase().includes(lowerCaseSearchTerm)\n    );\n  }, [users, searchTerm]);\n\n  useEffect(() => {\n    if (actionData?.success) {\n      // Refresh user data after successful transfer (optional, depends on real data source)\n      // setUsers(generateUsers());\n\n      // Add the new transaction to recent transfers\n      setRecentTransfers(prev => [\n        {\n          id: actionData.transaction.id,\n          amount: actionData.transaction.amount,\n          recipientId: actionData.transaction.recipientId,\n          recipientName: actionData.transaction.recipientName,\n          note: actionData.transaction.note,\n          timestamp: actionData.transaction.timestamp\n        },\n        ...prev.slice(0, 2) // Keep only the 3 most recent\n      ]);\n\n      // Reset form fields by changing the key\n      setFormKey(prev => prev + 1);\n      // Clear selected user and search term\n      setSelectedUser(null);\n      setSelectedUserId(\"\");\n      setSearchTerm(\"\");\n    }\n  }, [actionData]);\n\n  const handleRecipientChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const userId = e.target.value;\n    setSelectedUserId(userId);\n    const user = users.find(u => u.id === userId);\n    setSelectedUser(user || null);\n  };\n\n  return (\n    <div className=\"mx-auto max-w-4xl space-y-8\">\n      <h1 className=\"text-3xl font-bold\">Transfer ESSENCE</h1>\n\n      <div className=\"rounded-lg border bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-950\">\n        {actionData?.success ? (\n          <div className=\"mb-6 rounded-md bg-green-50 p-4 text-green-800 dark:bg-green-900 dark:text-green-50\">\n            <p className=\"font-medium\">{actionData.message}</p>\n            <p className=\"mt-2 text-sm\">\n              Transaction ID: {actionData.transaction.id}\n            </p>\n          </div>\n        ) : actionData?.error ? (\n          <div className=\"mb-6 rounded-md bg-red-50 p-4 text-red-800 dark:bg-red-900 dark:text-red-50\">\n            <p className=\"font-medium\">{actionData.error}</p>\n          </div>\n        ) : null}\n\n        <Form key={formKey} method=\"post\" className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"search-recipient\" className=\"mb-2 block text-sm font-medium text-gray-900 dark:text-gray-100\">\n              Search Recipient\n            </label>\n            <input\n              type=\"text\"\n              id=\"search-recipient\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              placeholder=\"Search by name or ID...\"\n              className=\"mb-2 block w-full rounded-md border border-gray-300 bg-white p-2 text-sm text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white\"\n            />\n            <label htmlFor=\"recipient\" className=\"sr-only\"> {/* Screen reader only label */}\n              Select Recipient\n            </label>\n            <select\n              id=\"recipient\"\n              name=\"recipient\"\n              value={selectedUserId} // Controlled component\n              className=\"block w-full rounded-md border border-gray-300 bg-white p-2 text-sm text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white\"\n              onChange={handleRecipientChange}\n              required\n            >\n              <option value=\"\" disabled={!!selectedUserId}>Select a user</option> {/* Disable placeholder if a user is selected */}\n              {filteredUsers.map((user) => (\n                <option key={user.id} value={user.id} className=\"text-gray-900 dark:text-white\"> {/* Ensure contrast */}\n                  {user.name} ({user.id})\n                </option>\n              ))}\n              {filteredUsers.length === 0 && searchTerm && (\n                <option value=\"\" disabled className=\"text-gray-500 dark:text-gray-400\">No users found</option>\n              )}\n            </select>\n          </div>\n\n          {selectedUser && (\n            <div className=\"flex items-center gap-4 rounded-md border p-4 dark:border-gray-700\">\n              <img\n                src={selectedUser.avatar}\n                alt={selectedUser.name}\n                className=\"h-12 w-12 rounded-full\"\n              />\n              <div>\n                <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">{selectedUser.name}</h3>\n              </div>\n            </div>\n          )}\n\n          <div>\n            <label htmlFor=\"amount\" className=\"mb-2 block text-sm font-medium text-gray-900 dark:text-gray-100\">\n              Amount (ESSENCE)\n            </label>\n            <input\n              type=\"number\"\n              id=\"amount\"\n              name=\"amount\"\n              min=\"1\"\n              step=\"1\"\n              className=\"block w-full rounded-md border border-gray-300 bg-white p-2 text-sm text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white\"\n              placeholder=\"Enter amount\"\n              required\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"note\" className=\"mb-2 block text-sm font-medium text-gray-900 dark:text-gray-100\">\n              Note (Optional)\n            </label>\n            <textarea\n              id=\"note\"\n              name=\"note\"\n              rows={3}\n              className=\"block w-full rounded-md border border-gray-300 bg-white p-2 text-sm text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white\"\n              placeholder=\"Add a note about this transfer\"\n            />\n          </div>\n\n          <div className=\"flex justify-center\">\n            <button\n              type=\"submit\"\n              disabled={isSubmitting || !selectedUserId} // Disable if submitting or no recipient selected\n              className=\"rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 dark:bg-blue-800 dark:hover:bg-blue-700 dark:focus:ring-blue-600 dark:focus:ring-offset-gray-950\"\n            >\n              {isSubmitting ? \"Processing...\" : \"Transfer ESSENCE\"}\n            </button>\n          </div>\n        </Form>\n      </div>\n\n      <div className=\"rounded-lg border bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-950\">\n        <h2 className=\"mb-4 text-xl font-semibold text-gray-900 dark:text-gray-100\">Recent Transfers</h2>\n        <div className=\"space-y-4\">\n          {recentTransfers.length > 0 ? (\n            recentTransfers.map((transfer) => {\n              // Find user data locally, fallback if user list changed or not found\n              const user = users.find(u => u.id === transfer.recipientId) || {\n                name: transfer.recipientName || `User ${transfer.recipientId}`,\n                avatar: `https://i.pravatar.cc/150?u=${transfer.recipientId}` // Use ID for consistent placeholder avatar\n              };\n              return (\n                <div key={transfer.id} className=\"flex items-center justify-between rounded-md border p-4 dark:border-gray-700\">\n                  <div className=\"flex items-center gap-4\">\n                    <img\n                      src={user.avatar}\n                      alt=\"Recipient\"\n                      className=\"h-10 w-10 rounded-full\"\n                    />\n                    <div>\n                      <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">{user.name}</h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {new Date(transfer.timestamp).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium text-green-600 dark:text-green-400\">\n                      -{transfer.amount} ESSENCE\n                    </p>\n                    {transfer.note && (\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {transfer.note}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              );\n            })\n          ) : (\n            // Placeholder content if no recent transfers\n            <p className=\"text-center text-gray-500 dark:text-gray-400\">No recent transfers to display.</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["meta","title","name","content","generateUsers","names","surnames","Array","from","length","_","i","id","balance","Math","floor","random","avatar","Transfer","users","setUsers","useState","selectedUser","setSelectedUser","selectedUserId","setSelectedUserId","recentTransfers","setRecentTransfers","formKey","setFormKey","searchTerm","setSearchTerm","actionData","useActionData","isSubmitting","useNavigation","state","filteredUsers","useMemo","lowerCaseSearchTerm","toLowerCase","filter","user","includes","useEffect","success","prev","transaction","amount","recipientId","recipientName","note","timestamp","slice","handleRecipientChange","e","userId","target","value","find","u","jsxs","className","children","jsx","message","error","Form","method","htmlFor","type","onChange","placeholder","required","disabled","map","src","alt","min","step","rows","transfer","Date","toLocaleString"],"mappings":"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"}