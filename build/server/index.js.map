{"version":3,"file":"index.js","sources":["../../app/entry.server.tsx","../../app/lib/utils.ts","../../app/hooks/useUserRole.ts","../../app/components/Header.tsx","../../app/root.tsx","../../app/routes/transactions.tsx","../../app/routes/management.tsx","../../app/routes/settings.tsx","../../app/routes/transfer.tsx","../../app/routes/_index.tsx","../../app/components/AccessDenied.tsx","../../app/components/admin/UsersTable.tsx","../../app/lib/mockData.ts","../../app/components/admin/AddUserModal.tsx","../../app/components/admin/BulkUploadModal.tsx","../../app/components/admin/ConfirmationModal.tsx","../../app/components/admin/UserProfileView.tsx","../../app/components/admin/EditUserModal.tsx","../../app/components/admin/ChangePasswordModal.tsx","../../app/components/admin/UsersTabContent.tsx","../../app/components/admin/GroupsManagement.tsx","../../app/components/admin/EssenceSettings.tsx","../../app/components/admin/BackupRestore.tsx","../../app/routes/admin.tsx"],"sourcesContent":["/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` âœ¨\n * For more information, see https://remix.run/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\n\nimport type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { createReadableStreamFromReadable } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { isbot } from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  // This is ignored so we can keep it in the template for visibility.  Feel\n  // free to delete this parameter in your app if you're not using it!\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loadContext: AppLoadContext\n) {\n  return isbot(request.headers.get(\"user-agent\") || \"\")\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n","// Create this file if it doesn't exist\nimport { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","/**\n * MOCK Hook: Simulates fetching the current user's role.\n * Replace this with actual authentication/authorization logic later.\n */\nexport function useUserRole(): 'Super Admin' | 'Admin' | 'User' | null {\n  // TODO: Replace with real role fetching logic\n  // For now, hardcode to 'Super Admin' for development/testing purposes.\n  // Change this to 'Admin' or 'User' to test access control.\n  return 'Super Admin';\n}\n","import { Link, NavLink } from \"@remix-run/react\"; // Use NavLink for active styling\nimport { cn } from \"~/lib/utils\"; // Import cn\nimport { useUserRole } from \"~/hooks/useUserRole\"; // Import the mock hook\n\nexport function Header() {\n  const userRole = useUserRole(); // Get the simulated user role\n\n  return (\n    <header className=\"flex h-16 items-center justify-between border-b bg-white px-4 dark:bg-gray-900\">\n      <div className=\"flex items-center gap-4\">\n        <Link to=\"/\" className=\"flex items-center gap-2 font-semibold\">\n          <DollarSignIcon className=\"h-6 w-6\" />\n          <span>Life Economy</span>\n        </Link>\n        <nav className=\"hidden items-center gap-4 text-sm font-medium md:flex\">\n          <NavLink\n            to=\"/dashboard\" // Assuming a dashboard route exists or will exist\n            className={({ isActive }) =>\n              cn(\n                \"hover:text-gray-900 dark:hover:text-gray-50\",\n                isActive\n                  ? \"text-gray-900 dark:text-gray-50\"\n                  : \"text-gray-500 dark:text-gray-400\"\n              )\n            }\n          >\n            Dashboard\n          </NavLink>\n          <NavLink\n            to=\"/transactions\"\n            className={({ isActive }) =>\n              cn(\n                \"hover:text-gray-900 dark:hover:text-gray-50\",\n                isActive\n                  ? \"text-gray-900 dark:text-gray-50\"\n                  : \"text-gray-500 dark:text-gray-400\"\n              )\n            }\n          >\n            Transactions\n          </NavLink>\n          <NavLink\n            to=\"/transfer\"\n            className={({ isActive }) =>\n              cn(\n                \"hover:text-gray-900 dark:hover:text-gray-50\",\n                isActive\n                  ? \"text-gray-900 dark:text-gray-50\"\n                  : \"text-gray-500 dark:text-gray-400\"\n              )\n            }\n          >\n            Transfer\n          </NavLink>\n          {/* Conditionally render Admin link */}\n          {userRole === 'Super Admin' && (\n            <NavLink\n              to=\"/admin\"\n              className={({ isActive }) =>\n                cn(\n                  \"hover:text-gray-900 dark:hover:text-gray-50\",\n                  isActive\n                    ? \"text-gray-900 dark:text-gray-50\"\n                    : \"text-gray-500 dark:text-gray-400\"\n                )\n              }\n            >\n              Admin\n            </NavLink>\n          )}\n          <NavLink\n            to=\"/management\"\n            className={({ isActive }) =>\n              cn(\n                \"hover:text-gray-900 dark:hover:text-gray-50\",\n                isActive\n                  ? \"text-gray-900 dark:text-gray-50\"\n                  : \"text-gray-500 dark:text-gray-400\"\n              )\n            }\n          >\n            Management\n          </NavLink>\n          <NavLink\n            to=\"/settings\"\n            className={({ isActive }) =>\n              cn(\n                \"hover:text-gray-900 dark:hover:text-gray-50\",\n                isActive\n                  ? \"text-gray-900 dark:text-gray-50\"\n                  : \"text-gray-500 dark:text-gray-400\"\n              )\n            }\n          >\n            Settings\n          </NavLink>\n        </nav>\n      </div>\n      <div className=\"flex items-center gap-4\">\n        {/* Placeholder for User Dropdown */}\n        <div className=\"flex items-center gap-2 rounded-md border p-2 text-sm\">\n          <span>Jane Doe</span>\n          {/* Display the simulated role */}\n          <span className=\"rounded-sm bg-gray-200 px-1 text-xs dark:bg-gray-700\">\n            {userRole || 'User'} {/* Show role, default to User if null */}\n          </span>\n          <LogOutIcon className=\"h-4 w-4\" />\n        </div>\n      </div>\n    </header>\n  );\n}\n\n// --- Icons (Keep existing icons) ---\n\nfunction DollarSignIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <line x1=\"12\" x2=\"12\" y1=\"2\" y2=\"22\" />\n      <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\" />\n    </svg>\n  );\n}\n\nfunction LogOutIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n      <polyline points=\"16 17 21 12 16 7\" />\n      <line x1=\"21\" x2=\"9\" y1=\"12\" y2=\"12\" />\n    </svg>\n  );\n}\n","import {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\nimport type { LinksFunction } from \"@remix-run/node\";\nimport { Header } from \"~/components/Header\"; // Import Header\n\nimport \"./tailwind.css\";\n\nexport const links: LinksFunction = () => [\n  { rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n  {\n    rel: \"preconnect\",\n    href: \"https://fonts.gstatic.com\",\n    crossOrigin: \"anonymous\",\n  },\n  {\n    rel: \"stylesheet\",\n    href: \"https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap\",\n  },\n];\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full bg-gray-50 dark:bg-gray-950\">\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  );\n}\n\nexport default function App() {\n  return (\n    <div className=\"flex min-h-screen flex-col\">\n      <Header />\n      <main className=\"flex-1 p-4 md:p-6\">\n        <Outlet />\n      </main>\n    </div>\n  );\n}\n\n// Add ErrorBoundary and HydrateFallback if needed for production\n// export function ErrorBoundary() { ... }\n// export function HydrateFallback() { ... }\n","import type { MetaFunction } from \"@remix-run/node\";\nimport { useState, useMemo, useCallback, useEffect } from \"react\"; // Added useEffect\nimport { Link } from \"@remix-run/react\";\nimport Papa from 'papaparse';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable'; // Import the autotable plugin\n\n// Extend jsPDF interface for autotable\ndeclare module 'jspdf' {\n  interface jsPDF {\n    autoTable: (options: any) => jsPDF;\n  }\n}\n\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Life Economy - Transactions\" },\n    { name: \"description\", content: \"View your transaction history\" },\n  ];\n};\n\n// --- SVG Icons (Keep existing icons) ---\nconst DownloadIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n    <polyline points=\"7 10 12 15 17 10\" />\n    <line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\" />\n  </svg>\n);\n\nconst FileTextIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n    <polyline points=\"14 2 14 8 20 8\" />\n    <line x1=\"16\" x2=\"8\" y1=\"13\" y2=\"13\" />\n    <line x1=\"16\" x2=\"8\" y1=\"17\" y2=\"17\" />\n    <line x1=\"10\" x2=\"8\" y1=\"9\" y2=\"9\" />\n  </svg>\n);\n\nconst TableIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M12 3v18\" />\n    <rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" rx=\"2\" />\n    <path d=\"M3 9h18\" />\n    <path d=\"M3 15h18\" />\n  </svg>\n);\n\nconst SearchIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <circle cx=\"11\" cy=\"11\" r=\"8\" />\n    <path d=\"m21 21-4.3-4.3\" />\n  </svg>\n);\n\nconst CalendarIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M8 2v4\" />\n    <path d=\"M16 2v4\" />\n    <rect width=\"18\" height=\"18\" x=\"3\" y=\"4\" rx=\"2\" />\n    <path d=\"M3 10h18\" />\n  </svg>\n);\n\n// --- Transaction Type Definition ---\ninterface Transaction {\n  id: string;\n  date: string; // Using string for simplicity, ideally Date object\n  narration: string;\n  debit: number | null;\n  credit: number | null;\n  balance: number;\n}\n\n// --- Dummy Transaction Data ---\nconst dummyTransactions: Transaction[] = [\n  { id: \"1\", date: \"2024-07-26 10:00:00\", narration: \"Initial Balance\", debit: null, credit: 1000.00, balance: 1000.00 },\n  { id: \"2\", date: \"2024-07-26 11:30:00\", narration: \"Transfer to Bob\", debit: 50.00, credit: null, balance: 950.00 },\n  { id: \"3\", date: \"2024-07-27 09:15:00\", narration: \"Received from Alice\", debit: null, credit: 200.00, balance: 1150.00 },\n  { id: \"4\", date: \"2024-07-27 14:00:00\", narration: \"Grocery Shopping\", debit: 75.50, credit: null, balance: 1074.50 },\n  { id: \"5\", date: \"2024-07-28 16:45:00\", narration: \"Salary Deposit\", debit: null, credit: 2500.00, balance: 3574.50 },\n  { id: \"6\", date: \"2024-07-29 08:00:00\", narration: \"Rent Payment\", debit: 1200.00, credit: null, balance: 2374.50 },\n  { id: \"7\", date: \"2024-07-30 12:00:00\", narration: \"Lunch with friends\", debit: 35.00, credit: null, balance: 2339.50 },\n  { id: \"8\", date: \"2024-07-31 18:00:00\", narration: \"Online Course Subscription\", debit: 29.99, credit: null, balance: 2309.51 },\n  { id: \"9\", date: \"2024-08-01 09:00:00\", narration: \"Received payment for freelance work\", debit: null, credit: 500.00, balance: 2809.51 },\n  { id: \"10\", date: \"2024-08-01 15:30:00\", narration: \"Utility Bill\", debit: 110.25, credit: null, balance: 2699.26 },\n  { id: \"11\", date: \"2024-08-02 10:15:00\", narration: \"Transfer from Savings\", debit: null, credit: 300.00, balance: 2999.26 },\n  { id: \"12\", date: \"2024-08-03 19:00:00\", narration: \"Dinner at Restaurant\", debit: 85.00, credit: null, balance: 2914.26 },\n];\n\nconst ITEMS_PER_PAGE = 5;\n\nexport default function Transactions() {\n  const [transactions] = useState<Transaction[]>(dummyTransactions); // Base data\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [csvDownloadUrl, setCsvDownloadUrl] = useState<string | null>(null); // State for CSV download link\n  const [pdfDownloadUrl, setPdfDownloadUrl] = useState<string | null>(null); // State for PDF download link\n\n  // --- Cleanup Blob URLs on component unmount ---\n  useEffect(() => {\n    // Store the current URLs in refs to access them in the cleanup function\n    // This avoids the cleanup function capturing stale state values\n    const currentCsvUrl = csvDownloadUrl;\n    const currentPdfUrl = pdfDownloadUrl;\n    return () => {\n      if (currentCsvUrl) {\n        console.log(\"[Cleanup] Revoking CSV URL:\", currentCsvUrl);\n        URL.revokeObjectURL(currentCsvUrl);\n      }\n      if (currentPdfUrl) {\n        console.log(\"[Cleanup] Revoking PDF URL:\", currentPdfUrl);\n        URL.revokeObjectURL(currentPdfUrl);\n      }\n    };\n  }, [csvDownloadUrl, pdfDownloadUrl]); // Re-run effect when URLs change\n\n\n  const formatCurrency = (amount: number | null) => {\n    if (amount === null) return \"\";\n    const numAmount = Number(amount);\n    if (isNaN(numAmount)) return \"\";\n    return numAmount.toFixed(2);\n  };\n\n\n  const filteredTransactions = useMemo(() => {\n    // Revoke URLs when filters change, forcing regeneration\n    // This logic is moved to an effect below to avoid side effects in useMemo\n    let filtered = transactions;\n    if (startDate) {\n      try {\n        const start = new Date(startDate);\n        start.setHours(0, 0, 0, 0);\n        if (!isNaN(start.getTime())) {\n          filtered = filtered.filter(tx => {\n            const txDate = new Date(tx.date);\n            return !isNaN(txDate.getTime()) && txDate >= start;\n          });\n        }\n      } catch (e) { console.error(\"Invalid start date:\", e); }\n    }\n    if (endDate) {\n       try {\n        const end = new Date(endDate);\n        end.setHours(23, 59, 59, 999);\n         if (!isNaN(end.getTime())) {\n          filtered = filtered.filter(tx => {\n             const txDate = new Date(tx.date);\n            return !isNaN(txDate.getTime()) && txDate <= end;\n          });\n        }\n      } catch (e) { console.error(\"Invalid end date:\", e); }\n    }\n    if (searchTerm) {\n      const lowerCaseSearchTerm = searchTerm.toLowerCase();\n      filtered = filtered.filter(tx =>\n        tx.narration.toLowerCase().includes(lowerCaseSearchTerm)\n      );\n    }\n    return filtered;\n  }, [transactions, startDate, endDate, searchTerm]);\n\n  // Effect to revoke URLs when filters change\n  useEffect(() => {\n    if (csvDownloadUrl) {\n      console.log(\"[Filter Change] Revoking old CSV URL:\", csvDownloadUrl);\n      URL.revokeObjectURL(csvDownloadUrl);\n      setCsvDownloadUrl(null);\n    }\n    if (pdfDownloadUrl) {\n      console.log(\"[Filter Change] Revoking old PDF URL:\", pdfDownloadUrl);\n      URL.revokeObjectURL(pdfDownloadUrl);\n      setPdfDownloadUrl(null);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [startDate, endDate, searchTerm]); // Only run when filters change\n\n\n   const [previousFilteredLength, setPreviousFilteredLength] = useState(filteredTransactions.length);\n   useMemo(() => {\n     if (filteredTransactions.length !== previousFilteredLength) {\n       setCurrentPage(1);\n       setPreviousFilteredLength(filteredTransactions.length);\n     }\n   }, [filteredTransactions, previousFilteredLength]);\n\n\n  const totalPages = Math.ceil(filteredTransactions.length / ITEMS_PER_PAGE);\n\n  const paginatedTransactions = useMemo(() => {\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n    const endIndex = startIndex + ITEMS_PER_PAGE;\n    return filteredTransactions.slice(startIndex, endIndex);\n  }, [filteredTransactions, currentPage]);\n\n  const handlePreviousPage = () => {\n    setCurrentPage((prev) => Math.max(prev - 1, 1));\n  };\n\n  const handleNextPage = () => {\n    setCurrentPage((prev) => Math.min(prev + 1, totalPages));\n  };\n\n  // --- Export Functions using Visible Link ---\n  const handleExportCSV = useCallback(() => {\n    console.log(\"[Export CSV] Started.\");\n    if (filteredTransactions.length === 0) {\n      alert(\"No transactions to export.\");\n      console.log(\"[Export CSV] Aborted: No transactions.\");\n      return;\n    }\n    try {\n      // Revoke previous CSV URL if it exists *before* creating new one\n      if (csvDownloadUrl) {\n        console.log(\"[Export CSV] Revoking previous CSV URL:\", csvDownloadUrl);\n        URL.revokeObjectURL(csvDownloadUrl);\n        // setCsvDownloadUrl(null); // Don't set to null here, wait for new URL\n      }\n       // Also revoke PDF URL if user switches export type\n      if (pdfDownloadUrl) {\n        console.log(\"[Export CSV] Revoking existing PDF URL:\", pdfDownloadUrl);\n        URL.revokeObjectURL(pdfDownloadUrl);\n        setPdfDownloadUrl(null); // Clear the *other* type's URL state\n      }\n\n\n      console.log(`[Export CSV] Processing ${filteredTransactions.length} transactions.`);\n      const csvData = Papa.unparse(filteredTransactions.map(tx => ({\n        Date: tx.date,\n        Narration: tx.narration,\n        Debit: formatCurrency(tx.debit),\n        Credit: formatCurrency(tx.credit),\n        Balance: formatCurrency(tx.balance),\n      })), { header: true });\n      console.log(\"[Export CSV] CSV data generated.\");\n\n      const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n      console.log(\"[Export CSV] Blob created.\");\n      const url = URL.createObjectURL(blob);\n      console.log(\"[Export CSV] New Blob URL created:\", url);\n\n      // Set the URL in state to render the visible link\n      setCsvDownloadUrl(url); // This triggers the useEffect for cleanup later\n      console.log(\"[Export CSV] CSV download URL set in state.\");\n\n    } catch (error) {\n        console.error(\"[Export CSV] Failed:\", error);\n        alert(\"An error occurred while exporting CSV data.\");\n        setCsvDownloadUrl(null); // Clear URL on error\n    } finally {\n        console.log(\"[Export CSV] Finished.\");\n    }\n  }, [filteredTransactions, csvDownloadUrl, pdfDownloadUrl]); // Keep dependencies\n\n  const handleExportPDF = useCallback(() => {\n    console.log(\"[Export PDF] Started.\");\n     if (filteredTransactions.length === 0) {\n      alert(\"No transactions to export.\");\n      console.log(\"[Export PDF] Aborted: No transactions.\");\n      return;\n    }\n    try {\n      // Revoke previous PDF URL if it exists *before* creating new one\n      if (pdfDownloadUrl) {\n        console.log(\"[Export PDF] Revoking previous PDF URL:\", pdfDownloadUrl);\n        URL.revokeObjectURL(pdfDownloadUrl);\n        // setPdfDownloadUrl(null); // Don't set to null here, wait for new URL\n      }\n      // Also revoke CSV URL if user switches export type\n      if (csvDownloadUrl) {\n        console.log(\"[Export PDF] Revoking existing CSV URL:\", csvDownloadUrl);\n        URL.revokeObjectURL(csvDownloadUrl);\n        setCsvDownloadUrl(null); // Clear the *other* type's URL state\n      }\n\n      console.log(`[Export PDF] Processing ${filteredTransactions.length} transactions.`);\n      console.log(\"[Export PDF] Creating jsPDF instance...\");\n      const doc = new jsPDF();\n      doc.text(\"Transaction History\", 14, 15);\n      console.log(\"[Export PDF] Generating PDF table using autoTable...\");\n      doc.autoTable({\n        head: [['Date', 'Narration', 'Debit', 'Credit', 'Balance']],\n        body: filteredTransactions.map(tx => [\n          tx.date,\n          tx.narration,\n          formatCurrency(tx.debit),\n          formatCurrency(tx.credit),\n          formatCurrency(tx.balance),\n        ]),\n        startY: 20,\n        headStyles: { fillColor: [22, 160, 133] },\n        styles: { fontSize: 8 },\n        columnStyles: {\n          0: { cellWidth: 35 }, 1: { cellWidth: 'auto'},\n          2: { halign: 'right', cellWidth: 25 }, 3: { halign: 'right', cellWidth: 25 },\n          4: { halign: 'right', cellWidth: 30 },\n        },\n      });\n      console.log(\"[Export PDF] autoTable finished.\");\n\n      console.log(\"[Export PDF] Generating PDF Blob...\");\n      const pdfBlob = doc.output('blob');\n      console.log(\"[Export PDF] Blob created.\");\n      const url = URL.createObjectURL(pdfBlob);\n      console.log(\"[Export PDF] New Blob URL created:\", url);\n\n      // Set the URL in state to render the visible link\n      setPdfDownloadUrl(url); // This triggers the useEffect for cleanup later\n      console.log(\"[Export PDF] PDF download URL set in state.\");\n\n    } catch (error) {\n        console.error(\"[Export PDF] Failed:\", error);\n        alert(\"An error occurred while exporting PDF data.\");\n        setPdfDownloadUrl(null); // Clear URL on error\n    } finally {\n        console.log(\"[Export PDF] Finished.\");\n    }\n  }, [filteredTransactions, pdfDownloadUrl, csvDownloadUrl]); // Keep dependencies\n  // --- End of Visible Link Export Functions ---\n\n  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n  const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, filteredTransactions.length);\n\n\n  return (\n    <div className=\"container mx-auto p-4 md:p-6\">\n      <h1 className=\"text-2xl font-semibold mb-4\">Transaction History</h1>\n\n      {/* --- Filters and Export Section --- */}\n      <div className=\"mb-4 flex flex-wrap items-center gap-4\">\n        {/* Date Range Picker */}\n        <div className=\"flex items-center gap-2\">\n          <CalendarIcon className=\"h-5 w-5 text-gray-500 dark:text-gray-400\" />\n          <input\n            type=\"date\"\n            placeholder=\"Start Date\"\n            value={startDate}\n            onChange={(e) => {\n                setStartDate(e.target.value);\n                if (endDate && e.target.value > endDate) {\n                    setEndDate(\"\");\n                }\n            }}\n            className=\"border rounded px-2 py-1 text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200\"\n            aria-label=\"Start Date\"\n          />\n          <span>-</span>\n          <input\n            type=\"date\"\n            placeholder=\"End Date\"\n            value={endDate}\n            onChange={(e) => setEndDate(e.target.value)}\n            min={startDate}\n            className=\"border rounded px-2 py-1 text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200\"\n            aria-label=\"End Date\"\n          />\n        </div>\n\n        {/* Keyword Search */}\n        <div className=\"relative flex-grow max-w-xs\">\n          <SearchIcon className=\"absolute left-2 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-500 dark:text-gray-400\" />\n          <input\n            type=\"search\"\n            placeholder=\"Search narration...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full rounded border bg-white py-1.5 pl-8 pr-2 text-sm shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200\"\n            aria-label=\"Search transactions\"\n          />\n        </div>\n\n        {/* Export Buttons and Links */}\n        <div className=\"flex flex-col items-end gap-1 ml-auto\">\n           <div className=\"flex gap-2\">\n              <button\n                onClick={handleExportCSV}\n                disabled={filteredTransactions.length === 0}\n                className=\"inline-flex items-center gap-1 rounded-md bg-gray-200 px-3 py-1.5 text-sm font-medium text-gray-700 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600 dark:disabled:bg-gray-800 dark:disabled:text-gray-500\"\n                aria-label=\"Generate CSV Export Link\"\n              >\n                <FileTextIcon className=\"h-4 w-4\" />\n                Export CSV\n              </button>\n              <button\n                onClick={handleExportPDF}\n                disabled={filteredTransactions.length === 0}\n                className=\"inline-flex items-center gap-1 rounded-md bg-gray-200 px-3 py-1.5 text-sm font-medium text-gray-700 hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600 dark:disabled:bg-gray-800 dark:disabled:text-gray-500\"\n                aria-label=\"Generate PDF Export Link\"\n              >\n                <DownloadIcon className=\"h-4 w-4\" />\n                Export PDF\n              </button>\n           </div>\n           {/* Visible Download Links */}\n           <div className=\"flex gap-4 text-sm h-5\"> {/* Added fixed height to prevent layout shift */}\n             {csvDownloadUrl && (\n               <a\n                 href={csvDownloadUrl}\n                 download=\"transactions.csv\"\n                 className=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 underline\"\n                 // Optional: Add onClick handler if needed for analytics or immediate cleanup\n                 // onClick={() => { console.log('CSV Download link clicked'); }}\n               >\n                 Click to Download CSV\n               </a>\n             )}\n             {pdfDownloadUrl && (\n               <a\n                 href={pdfDownloadUrl}\n                 download=\"transactions.pdf\"\n                 className=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 underline\"\n                 // Optional: Add onClick handler if needed for analytics or immediate cleanup\n                 // onClick={() => { console.log('PDF Download link clicked'); }}\n               >\n                 Click to Download PDF\n               </a>\n             )}\n           </div>\n        </div>\n      </div>\n\n      {/* --- Transactions Table --- */}\n      <div className=\"overflow-x-auto rounded-lg border dark:border-gray-700\">\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-800\">\n            <tr>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-400\">Date</th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-400\">Narration</th>\n              <th scope=\"col\" className=\"px-4 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-400\">Debit</th>\n              <th scope=\"col\" className=\"px-4 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-400\">Credit</th>\n              <th scope=\"col\" className=\"px-4 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-400\">Balance</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-gray-200 bg-white dark:divide-gray-700 dark:bg-gray-900\">\n            {paginatedTransactions.length > 0 ? (\n              paginatedTransactions.map((tx) => (\n                <tr key={tx.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800/50\">\n                  <td className=\"whitespace-nowrap px-4 py-3 text-sm text-gray-900 dark:text-gray-200\">{tx.date}</td>\n                  <td className=\"whitespace-nowrap px-4 py-3 text-sm text-gray-900 dark:text-gray-200\">{tx.narration}</td>\n                  <td className=\"whitespace-nowrap px-4 py-3 text-right text-sm text-red-600 dark:text-red-400\">{formatCurrency(tx.debit)}</td>\n                  <td className=\"whitespace-nowrap px-4 py-3 text-right text-sm text-green-600 dark:text-green-400\">{formatCurrency(tx.credit)}</td>\n                  <td className=\"whitespace-nowrap px-4 py-3 text-right text-sm font-medium text-gray-900 dark:text-gray-200\">{formatCurrency(tx.balance)}</td>\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan={5} className=\"px-4 py-4 text-center text-sm text-gray-500 dark:text-gray-400\">\n                  {transactions.length === 0 ? \"No transactions available.\" : \"No transactions found matching your criteria.\"}\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* --- Pagination --- */}\n      {totalPages > 1 && (\n        <div className=\"mt-4 flex flex-wrap items-center justify-between gap-2\">\n          <span className=\"text-sm text-gray-700 dark:text-gray-400\">\n            {filteredTransactions.length > 0 ?\n              `Showing ${startIndex + 1} to ${endIndex} of ${filteredTransactions.length} results` :\n              'Showing 0 results'\n            }\n          </span>\n          <div className=\"flex gap-1\">\n            <button\n              onClick={handlePreviousPage}\n              disabled={currentPage === 1}\n              className=\"rounded border bg-white px-2 py-1 text-sm hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed dark:bg-gray-800 dark:border-gray-700 dark:text-gray-200 dark:hover:bg-gray-700 dark:disabled:bg-gray-900 dark:disabled:text-gray-500\"\n              aria-label=\"Go to previous page\"\n            >\n              Previous\n            </button>\n            <button\n              onClick={handleNextPage}\n              disabled={currentPage === totalPages || totalPages === 0}\n              className=\"rounded border bg-white px-2 py-1 text-sm hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed dark:bg-gray-800 dark:border-gray-700 dark:text-gray-200 dark:hover:bg-gray-700 dark:disabled:bg-gray-900 dark:disabled:text-gray-500\"\n              aria-label=\"Go to next page\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import type { MetaFunction } from \"@remix-run/node\";\nimport { useState, useMemo, useEffect } from \"react\";\nimport { cn } from \"~/lib/utils\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Life Economy - Management\" },\n    { name: \"description\", content: \"Manage the Life Economy system\" },\n  ];\n};\n\n// --- Icons ---\n\n// Define missing icons\nfunction CurrencyIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"8\" />\n      <line x1=\"3\" y1=\"3\" x2=\"21\" y2=\"21\" />\n    </svg>\n  );\n}\n\nfunction BehaviorIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M12 2a10 10 0 1 0 10 10\" />\n      <path d=\"m16 16-3-3-3 3\" />\n      <path d=\"m16 8 3 3-6 6\" />\n    </svg>\n  );\n}\n\nfunction EconomyIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <line x1=\"12\" x2=\"12\" y1=\"2\" y2=\"22\" />\n      <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\" />\n    </svg>\n  );\n}\n\nfunction PlusCircleIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"10\" />\n      <line x1=\"12\" x2=\"12\" y1=\"8\" y2=\"16\" />\n      <line x1=\"8\" x2=\"16\" y1=\"12\" y2=\"12\" />\n    </svg>\n  );\n}\n\nfunction SearchIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <circle cx=\"11\" cy=\"11\" r=\"8\" />\n      <path d=\"m21 21-4.3-4.3\" />\n    </svg>\n  );\n}\n\nfunction CheckCircleIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\" />\n      <polyline points=\"22 4 12 14.01 9 11.01\" />\n    </svg>\n  );\n}\n\nfunction UserIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\n      <circle cx=\"12\" cy=\"7\" r=\"4\" />\n    </svg>\n  );\n}\n\nfunction UsersIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\" />\n      <circle cx=\"9\" cy=\"7\" r=\"4\" />\n      <path d=\"M22 21v-2a4 4 0 0 0-3-3.87\" />\n      <path d=\"M16 3.13a4 4 0 0 1 0 7.75\" />\n    </svg>\n  );\n}\n\nfunction ThumbsUpIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M7 10v12\" />\n      <path d=\"M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z\" />\n    </svg>\n  );\n}\n\nfunction ThumbsDownIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M17 14V2\" />\n      <path d=\"M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22h0a3.13 3.13 0 0 1-3-3.88Z\" />\n    </svg>\n  );\n}\n\n// Icons for Economy Management Actions\nfunction EditIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\n      <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\n    </svg>\n  );\n}\n\nfunction Trash2Icon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M3 6h18\" />\n      <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\" />\n      <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\" />\n      <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\" />\n    </svg>\n  );\n}\n\nfunction ToggleLeftIcon(props: React.SVGProps<SVGSVGElement>) { // For Deactivate\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <rect x=\"1\" y=\"5\" width=\"22\" height=\"14\" rx=\"7\" ry=\"7\"></rect>\n      <circle cx=\"8\" cy=\"12\" r=\"3\"></circle>\n    </svg>\n  );\n}\n\nfunction ToggleRightIcon(props: React.SVGProps<SVGSVGElement>) { // For Activate\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <rect x=\"1\" y=\"5\" width=\"22\" height=\"14\" rx=\"7\" ry=\"7\"></rect>\n      <circle cx=\"16\" cy=\"12\" r=\"3\"></circle>\n    </svg>\n  );\n}\n\nfunction XCircleIcon(props: React.SVGProps<SVGSVGElement>) { // For Unassign\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n      <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\n      <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\n    </svg>\n  );\n}\n\nfunction LinkIcon(props: React.SVGProps<SVGSVGElement>) { // For Assign\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path>\n      <path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path>\n    </svg>\n  );\n}\n\n\n// --- Types ---\ntype Tab = \"currency\" | \"behavior\" | \"economy\";\ntype BehaviorActionType = \"reward\" | \"fine\";\ntype TargetType = \"user\" | \"group\";\ntype Frequency = \"One-time\" | \"Daily\" | \"Weekly\" | \"Monthly\";\ntype EconomySubTab = \"addActivity\" | \"addExpense\" | \"assignActivity\" | \"assignExpense\";\n\ninterface IssuanceRecord {\n  id: string;\n  timestamp: Date; // Keep as Date object, but initialize statically\n  amount: number;\n  reason: string;\n  issuedBy: string; // Placeholder for admin user\n}\n\ninterface BehaviorRecord {\n  id: string;\n  timestamp: Date; // Keep as Date object\n  actor: string; // Admin/Awarder/Finer\n  target: string; // User/Group Name or ID\n  targetType: TargetType;\n  amount: number;\n  reason: string;\n}\n\ninterface Activity {\n  id: string;\n  name: string;\n  description: string;\n  pay: number;\n  frequency: Frequency;\n  slots: number; // Renamed from 'slotsAvailable'\n  createdDate: Date; // Keep as Date object, but initialize statically\n  isActive: boolean; // For activate/deactivate\n}\n\ninterface Expense {\n  id: string;\n  name: string;\n  description: string;\n  cost: number;\n  frequency: Frequency;\n  createdDate: Date; // Keep as Date object\n  isActive: boolean; // For activate/deactivate\n}\n\ninterface ActivityAssignment {\n  id: string;\n  targetId: string; // User or Group ID\n  targetName: string; // User or Group Name\n  targetType: TargetType;\n  activityId: string;\n  activityName: string;\n  assignedDate: Date; // Keep as Date object\n  assignedBy: string; // Admin username/ID\n}\n\ninterface ExpenseAssignment {\n  id: string;\n  targetId: string; // User or Group ID\n  targetName: string; // User or Group Name\n  targetType: TargetType;\n  expenseId: string;\n  expenseName: string;\n  assignedDate: Date; // Keep as Date object\n  assignedBy: string; // Admin username/ID\n}\n\n\n// Mock Data (Replace with actual data fetching)\nconst MOCK_USERS = [\n  { id: \"user1\", name: \"Alice\" },\n  { id: \"user2\", name: \"Bob\" },\n  { id: \"user3\", name: \"Charlie\" },\n  { id: \"user4\", name: \"Diana\" },\n];\nconst MOCK_GROUPS = [\n  { id: \"groupA\", name: \"Developers\" },\n  { id: \"groupB\", name: \"Marketing\" },\n  { id: \"groupC\", name: \"Support Team\" },\n];\n\n// --- Currency Management Component ---\nfunction CurrencyManagementTab() {\n  // State for total balance (start with a mock value)\n  const [totalEssence, setTotalEssence] = useState<number>(1000000);\n  // State for issuance history (start with mock data using static dates)\n  const [issuanceHistory, setIssuanceHistory] = useState<IssuanceRecord[]>([\n    { id: \"1\", timestamp: new Date(\"2023-10-26T10:00:00Z\"), amount: 500000, reason: \"Initial Seed\", issuedBy: \"System\" },\n    { id: \"2\", timestamp: new Date(\"2023-10-27T11:30:00Z\"), amount: 500000, reason: \"Phase 1 Allocation\", issuedBy: \"Admin A\" },\n  ]);\n  // State for minting form\n  const [mintAmount, setMintAmount] = useState<string>(\"\");\n  const [mintReason, setMintReason] = useState<string>(\"\");\n  // State for history search filter\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\n\n  const handleMintCurrency = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const amount = parseFloat(mintAmount);\n    if (isNaN(amount) || amount <= 0) {\n      alert(\"Please enter a valid positive amount to mint.\");\n      return;\n    }\n\n    const newRecord: IssuanceRecord = {\n      id: crypto.randomUUID(), // Simple unique ID for demo - OK in event handler\n      timestamp: new Date(), // OK in event handler\n      amount: amount,\n      reason: mintReason || \"Minted via console\",\n      issuedBy: \"Current Admin\", // Placeholder\n    };\n\n    setTotalEssence((prevTotal) => prevTotal + amount);\n    setIssuanceHistory((prevHistory) => [newRecord, ...prevHistory]); // Add to top\n\n    // Clear form\n    setMintAmount(\"\");\n    setMintReason(\"\");\n  };\n\n  const filteredHistory = useMemo(() => {\n    if (!searchTerm) {\n      return issuanceHistory;\n    }\n    const lowerCaseSearch = searchTerm.toLowerCase();\n    return issuanceHistory.filter(\n      (record) =>\n        record.reason.toLowerCase().includes(lowerCaseSearch) ||\n        record.issuedBy.toLowerCase().includes(lowerCaseSearch) ||\n        record.amount.toString().includes(lowerCaseSearch) ||\n        record.timestamp.toLocaleDateString().includes(lowerCaseSearch) ||\n        record.timestamp.toLocaleTimeString().includes(lowerCaseSearch)\n    );\n  }, [issuanceHistory, searchTerm]);\n\n  return (\n    <div className=\"p-4 border rounded-b-md dark:border-gray-700 space-y-6\">\n      {/* 1. Total Balance Display */}\n      <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n        <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground\">\n          Total ESSENCE in Circulation\n        </h3>\n        <div className=\"mt-2 text-3xl font-bold text-primary dark:text-primary\">\n          {totalEssence.toLocaleString()} <span className=\"text-xl font-medium text-muted-foreground dark:text-muted-foreground\">ESSENCE</span>\n        </div>\n      </div>\n\n      {/* 2. Currency Minting Section */}\n      <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n        <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n          Mint New ESSENCE\n        </h3>\n        <form onSubmit={handleMintCurrency} className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"mintAmount\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">\n              Amount to Mint\n            </label>\n            <input\n              type=\"number\"\n              id=\"mintAmount\"\n              name=\"mintAmount\"\n              value={mintAmount}\n              onChange={(e) => setMintAmount(e.target.value)}\n              required\n              min=\"0.01\" // Or adjust as needed\n              step=\"any\"\n              className=\"input-style mt-1\" // Use class from tailwind.css\n              placeholder=\"e.g., 10000\"\n            />\n          </div>\n          <div>\n            <label htmlFor=\"mintReason\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">\n              Reason / Description (Optional)\n            </label>\n            <input\n              type=\"text\"\n              id=\"mintReason\"\n              name=\"mintReason\"\n              value={mintReason}\n              onChange={(e) => setMintReason(e.target.value)}\n              className=\"input-style mt-1\" // Use class from tailwind.css\n              placeholder=\"e.g., Monthly reward pool top-up\"\n            />\n          </div>\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary\" // Use classes from tailwind.css\n          >\n            <PlusCircleIcon className=\"-ml-1 mr-2 h-5 w-5\" aria-hidden=\"true\" />\n            Mint Currency\n          </button>\n        </form>\n      </div>\n\n      {/* 3. Issuance History Table */}\n      <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n        <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n          Issuance History\n        </h3>\n        {/* Search Input */}\n        <div className=\"mb-4 relative\">\n           <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n             <SearchIcon className=\"h-5 w-5 text-muted-foreground\" aria-hidden=\"true\" />\n           </div>\n           <input\n             type=\"text\"\n             placeholder=\"Search history (reason, amount, date...)\"\n             value={searchTerm}\n             onChange={(e) => setSearchTerm(e.target.value)}\n             className=\"input-style block w-full pl-10 pr-3 py-2\" // Use class\n           />\n         </div>\n\n        {/* Table */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-border dark:divide-border\">\n            <thead className=\"bg-muted/50 dark:bg-muted/50\">\n              <tr>\n                <th scope=\"col\" className=\"th-style\"> {/* Use class */}\n                  Date / Time\n                </th>\n                <th scope=\"col\" className=\"th-style\"> {/* Use class */}\n                  Amount Issued\n                </th>\n                <th scope=\"col\" className=\"th-style\"> {/* Use class */}\n                  Reason / Description\n                </th>\n                <th scope=\"col\" className=\"th-style\"> {/* Use class */}\n                  Issued By\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-card dark:bg-card divide-y divide-border dark:divide-border\">\n              {filteredHistory.length > 0 ? (\n                filteredHistory.map((record) => (\n                  <tr key={record.id}>\n                    <td className=\"td-style\"> {/* Use class */}\n                      {record.timestamp.toLocaleString()}\n                    </td>\n                    <td className=\"td-style font-medium\"> {/* Use class */}\n                      {record.amount.toLocaleString()}\n                    </td>\n                    <td className=\"td-style\"> {/* Use class */}\n                      {record.reason}\n                    </td>\n                    <td className=\"td-style\"> {/* Use class */}\n                      {record.issuedBy}\n                    </td>\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td colSpan={4} className=\"px-6 py-4 text-center text-sm text-muted-foreground dark:text-muted-foreground\">\n                    {searchTerm ? \"No matching records found.\" : \"No issuance history yet.\"}\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// --- Behavior Management Component ---\nfunction BehaviorManagementTab() {\n  // --- State ---\n  const [actionType, setActionType] = useState<BehaviorActionType>(\"reward\");\n  const [targetType, setTargetType] = useState<TargetType>(\"user\");\n  const [selectedTarget, setSelectedTarget] = useState<string>(\"\"); // Store ID or name\n  const [amount, setAmount] = useState<string>(\"\");\n  const [reason, setReason] = useState<string>(\"\");\n  const [showNotification, setShowNotification] = useState<boolean>(false); // Notification state\n  const [notificationMessage, setNotificationMessage] = useState<string>(\"\"); // Notification message state\n\n  // Mock history & fine account (replace with actual data/API calls)\n  const [rewardHistory, setRewardHistory] = useState<BehaviorRecord[]>([]);\n  const [fineHistory, setFineHistory] = useState<BehaviorRecord[]>([]);\n  const [fineAccountBalance, setFineAccountBalance] = useState<number>(500); // Mock starting balance\n  const [searchTermReward, setSearchTermReward] = useState<string>(\"\");\n  const [searchTermFine, setSearchTermFine] = useState<string>(\"\");\n\n  // --- Effects ---\n  // Effect to hide notification after a delay\n  useEffect(() => {\n    if (showNotification) {\n      const timer = setTimeout(() => {\n        setShowNotification(false);\n        setNotificationMessage(\"\"); // Clear message when hiding\n      }, 3000); // Hide after 3 seconds\n      return () => clearTimeout(timer); // Cleanup timer on unmount or if shown again\n    }\n  }, [showNotification]);\n\n  // --- Derived State / Memos ---\n  const targetOptions = useMemo(() => {\n    return targetType === \"user\" ? MOCK_USERS : MOCK_GROUPS;\n  }, [targetType]);\n\n  const filteredRewardHistory = useMemo(() => {\n    if (!searchTermReward) return rewardHistory;\n    const lowerSearch = searchTermReward.toLowerCase();\n    return rewardHistory.filter(\n      (r) =>\n        r.actor.toLowerCase().includes(lowerSearch) ||\n        r.target.toLowerCase().includes(lowerSearch) ||\n        r.reason.toLowerCase().includes(lowerSearch) ||\n        r.amount.toString().includes(lowerSearch) ||\n        r.timestamp.toLocaleString().toLowerCase().includes(lowerSearch)\n    );\n  }, [rewardHistory, searchTermReward]);\n\n  const filteredFineHistory = useMemo(() => {\n    if (!searchTermFine) return fineHistory;\n    const lowerSearch = searchTermFine.toLowerCase();\n    return fineHistory.filter(\n      (r) =>\n        r.actor.toLowerCase().includes(lowerSearch) ||\n        r.target.toLowerCase().includes(lowerSearch) ||\n        r.reason.toLowerCase().includes(lowerSearch) ||\n        r.amount.toString().includes(lowerSearch) ||\n        r.timestamp.toLocaleString().toLowerCase().includes(lowerSearch)\n    );\n  }, [fineHistory, searchTermFine]);\n\n  // --- Handlers ---\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const numericAmount = parseFloat(amount);\n\n    if (isNaN(numericAmount) || numericAmount <= 0) {\n      alert(\"Please enter a valid positive amount.\");\n      return;\n    }\n    if (!selectedTarget) {\n      alert(`Please select a ${targetType}.`);\n      return;\n    }\n    if (!reason.trim()) {\n      alert(\"Please provide a reason.\");\n      return;\n    }\n\n    const targetName = targetOptions.find(t => t.id === selectedTarget)?.name || selectedTarget; // Get name for display\n\n    const newRecord: BehaviorRecord = {\n      id: crypto.randomUUID(), // OK in event handler\n      timestamp: new Date(), // OK in event handler\n      actor: \"Current Admin\", // Placeholder\n      target: targetName,\n      targetType: targetType,\n      amount: numericAmount,\n      reason: reason,\n    };\n\n    let successMsg = \"\";\n    if (actionType === \"reward\") {\n      setRewardHistory((prev) => [newRecord, ...prev]);\n      successMsg = `Successfully rewarded ${targetName} with ${numericAmount.toLocaleString()} ESSENCE.`;\n      // TODO: Add actual reward logic (deduct from admin, add to target) via API call\n      console.log(\"Mock Reward:\", newRecord);\n    } else { // Fine\n      setFineHistory((prev) => [newRecord, ...prev]);\n      setFineAccountBalance((prev) => prev + numericAmount); // Add to fine account\n      successMsg = `Successfully fined ${targetName} ${numericAmount.toLocaleString()} ESSENCE.`;\n      // TODO: Add actual fine logic (deduct from target) via API call\n      console.log(\"Mock Fine:\", newRecord);\n    }\n\n    // Show notification\n    setNotificationMessage(successMsg);\n    setShowNotification(true);\n\n    // Clear form\n    setSelectedTarget(\"\");\n    setAmount(\"\");\n    setReason(\"\");\n  };\n\n  // --- Render ---\n  // Placeholder for permission check\n  const isAdmin = true; // Replace with actual permission logic\n  if (!isAdmin) {\n    return (\n      <div className=\"p-4 border rounded-b-md dark:border-gray-700\">\n        <p className=\"text-destructive dark:text-destructive-foreground\">Access Denied. You do not have permission to manage behavior.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 border rounded-b-md dark:border-gray-700 space-y-6 relative\"> {/* Added relative positioning for notification */}\n\n      {/* Success Notification */}\n      {showNotification && (\n        <div\n          className=\"fixed top-20 right-6 z-50 p-4 mb-4 text-sm text-green-800 rounded-lg bg-green-100 dark:bg-green-900 dark:text-green-300 shadow-lg border border-green-300 dark:border-green-600\"\n          role=\"alert\"\n        >\n          <div className=\"flex items-center\">\n            <CheckCircleIcon className=\"flex-shrink-0 inline w-5 h-5 mr-3\" />\n            <span className=\"font-medium\">{notificationMessage}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Fine Account Balance Display (Moved Here) */}\n      <div className=\"bg-yellow-50 dark:bg-yellow-900/30 border border-yellow-200 dark:border-yellow-700/50 shadow rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium leading-6 text-yellow-800 dark:text-yellow-300\">\n            Central Fine Account Balance\n          </h3>\n          <div className=\"mt-1 text-xl font-bold text-yellow-900 dark:text-yellow-200\">\n            {fineAccountBalance.toLocaleString()} <span className=\"text-base font-medium text-yellow-700 dark:text-yellow-400\">ESSENCE</span>\n          </div>\n          <p className=\"mt-1 text-xs text-yellow-600 dark:text-yellow-400\">This balance increases when fines are issued.</p>\n      </div>\n\n      {/* Action Form Section */}\n      <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n        {/* 1. Reward/Fine Toggle */}\n        <div className=\"mb-6\">\n          <span className=\"text-lg font-medium text-card-foreground dark:text-card-foreground mr-4\">Action:</span>\n          <div className=\"inline-flex rounded-md shadow-sm\" role=\"group\">\n            <button\n              type=\"button\"\n              onClick={() => setActionType(\"reward\")}\n              className={cn(\n                \"inline-flex items-center px-4 py-2 text-sm font-medium border border-input dark:border-input focus:z-10 focus:ring-2 focus:ring-ring focus:border-primary dark:focus:ring-offset-background\",\n                actionType === \"reward\"\n                  ? \"bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300 z-10 ring-1 ring-green-500\"\n                  : \"bg-background text-foreground hover:bg-muted/50 dark:bg-background dark:text-foreground dark:hover:bg-muted/50\",\n                \"rounded-l-lg\"\n              )}\n            >\n              <ThumbsUpIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n              Reward\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => setActionType(\"fine\")}\n              className={cn(\n                \"inline-flex items-center px-4 py-2 text-sm font-medium border-t border-b border-r border-input dark:border-input focus:z-10 focus:ring-2 focus:ring-ring focus:border-primary dark:focus:ring-offset-background\",\n                 actionType === \"fine\"\n                  ? \"bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300 z-10 ring-1 ring-red-500\"\n                  : \"bg-background text-foreground hover:bg-muted/50 dark:bg-background dark:text-foreground dark:hover:bg-muted/50\",\n                 \"rounded-r-md\" // Adjusted for two buttons\n              )}\n            >\n              <ThumbsDownIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n              Fine\n            </button>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* 2. Target Type Toggle */}\n          <div>\n            <label className=\"block text-sm font-medium text-foreground dark:text-foreground mb-1\">Target Type</label>\n            <div className=\"inline-flex rounded-md shadow-sm\" role=\"group\">\n              <button\n                type=\"button\"\n                onClick={() => { setTargetType(\"user\"); setSelectedTarget(\"\"); }} // Reset selection on change\n                className={cn(\n                  \"inline-flex items-center px-4 py-2 text-sm font-medium border border-input dark:border-input focus:z-10 focus:ring-2 focus:ring-ring focus:border-primary dark:focus:ring-offset-background\",\n                  targetType === \"user\"\n                    ? \"bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300 z-10 ring-1 ring-blue-500\"\n                    : \"bg-background text-foreground hover:bg-muted/50 dark:bg-background dark:text-foreground dark:hover:bg-muted/50\",\n                  \"rounded-l-lg\"\n                )}\n              >\n                <UserIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n                Individual User\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => { setTargetType(\"group\"); setSelectedTarget(\"\"); }} // Reset selection on change\n                className={cn(\n                  \"inline-flex items-center px-4 py-2 text-sm font-medium border-t border-b border-r border-input dark:border-input focus:z-10 focus:ring-2 focus:ring-ring focus:border-primary dark:focus:ring-offset-background\",\n                  targetType === \"group\"\n                    ? \"bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300 z-10 ring-1 ring-blue-500\"\n                    : \"bg-background text-foreground hover:bg-muted/50 dark:bg-background dark:text-foreground dark:hover:bg-muted/50\",\n                  \"rounded-r-md\"\n                )}\n              >\n                <UsersIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n                Group\n              </button>\n            </div>\n          </div>\n\n          {/* 3. User/Group Selector */}\n          <div>\n            <label htmlFor=\"targetSelector\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">\n              Select {targetType === \"user\" ? \"User\" : \"Group\"}\n            </label>\n            {/* Basic Select - Replace with searchable dropdown component later */}\n            <select\n              id=\"targetSelector\"\n              name=\"targetSelector\"\n              value={selectedTarget}\n              onChange={(e) => setSelectedTarget(e.target.value)}\n              required\n              className=\"input-style mt-1\" // Use class\n            >\n              <option value=\"\" disabled>-- Select a {targetType} --</option>\n              {targetOptions.map((option) => (\n                <option key={option.id} value={option.id}>\n                  {option.name}\n                </option>\n              ))}\n            </select>\n             <p className=\"mt-1 text-xs text-muted-foreground dark:text-muted-foreground\">Note: This is a basic selector. A searchable dropdown will be implemented later.</p>\n          </div>\n\n          {/* 4. Amount */}\n          <div>\n            <label htmlFor=\"behaviorAmount\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">\n              Amount (ESSENCE)\n            </label>\n            <input\n              type=\"number\"\n              id=\"behaviorAmount\"\n              name=\"behaviorAmount\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              required\n              min=\"0.01\"\n              step=\"any\"\n              className=\"input-style mt-1\" // Use class\n              placeholder={`Amount to ${actionType}`}\n            />\n          </div>\n\n          {/* 5. Reason */}\n          <div>\n            <label htmlFor=\"behaviorReason\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">\n              Reason\n            </label>\n            <textarea\n              id=\"behaviorReason\"\n              name=\"behaviorReason\"\n              rows={3}\n              value={reason}\n              onChange={(e) => setReason(e.target.value)}\n              required\n              className=\"input-style mt-1\" // Use class\n              placeholder={`Reason for the ${actionType}...`}\n            />\n          </div>\n\n          {/* 6. Submit Button */}\n          <button\n            type=\"submit\"\n            className={cn(\n              \"btn\", // Use base btn class\n              actionType === 'reward'\n                ? \"bg-green-600 hover:bg-green-700 focus:ring-green-500 text-white\" // Keep specific colors\n                : \"bg-red-600 hover:bg-red-700 focus:ring-red-500 text-white\" // Keep specific colors\n            )}\n          >\n            {actionType === 'reward' ? <ThumbsUpIcon className=\"-ml-1 mr-2 h-5 w-5\" /> : <ThumbsDownIcon className=\"-ml-1 mr-2 h-5 w-5\" />}\n            {actionType === \"reward\" ? \"Reward\" : \"Fine\"} {targetType === \"user\" ? \"User\" : \"Group\"}\n          </button>\n        </form>\n      </div>\n\n      {/* History Tables Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Reward History Table */}\n        <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n          <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n            Reward History\n          </h3>\n          {/* Search Input */}\n          <div className=\"mb-4 relative\">\n             <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n               <SearchIcon className=\"h-5 w-5 text-muted-foreground\" aria-hidden=\"true\" />\n             </div>\n             <input\n               type=\"text\"\n               placeholder=\"Search rewards...\"\n               value={searchTermReward}\n               onChange={(e) => setSearchTermReward(e.target.value)}\n               className=\"input-style block w-full pl-10 pr-3 py-2\" // Use class\n             />\n           </div>\n          {/* Table */}\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-border dark:divide-border\">\n              <thead className=\"bg-muted/50 dark:bg-muted/50\">\n                <tr>\n                  <th scope=\"col\" className=\"th-style\">Date</th> {/* Use class */}\n                  <th scope=\"col\" className=\"th-style\">Awarder</th> {/* Use class */}\n                  <th scope=\"col\" className=\"th-style\">Recipient</th> {/* Use class */}\n                  <th scope=\"col\" className=\"th-style\">Amount</th> {/* Use class */}\n                  <th scope=\"col\" className=\"th-style\">Reason</th> {/* Use class */}\n                </tr>\n              </thead>\n              <tbody className=\"bg-card dark:bg-card divide-y divide-border dark:divide-border\">\n                {filteredRewardHistory.length > 0 ? (\n                  filteredRewardHistory.map((record) => (\n                    <tr key={record.id}>\n                      <td className=\"td-style text-muted-foreground\">{record.timestamp.toLocaleString()}</td> {/* Use class */}\n                      <td className=\"td-style\">{record.actor}</td> {/* Use class */}\n                      <td className=\"td-style\">{record.target} ({record.targetType})</td> {/* Use class */}\n                      <td className=\"td-style text-green-600 dark:text-green-400 font-medium\">+{record.amount.toLocaleString()}</td> {/* Use class */}\n                      <td className=\"td-style text-muted-foreground max-w-xs truncate\" title={record.reason}>{record.reason}</td> {/* Use class */}\n                    </tr>\n                  ))\n                ) : (\n                  <tr><td colSpan={5} className=\"px-6 py-4 text-center text-sm text-muted-foreground\">{searchTermReward ? \"No matching rewards found.\" : \"No reward history yet.\"}</td></tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Fine History Table */}\n        <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n          <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n            Fine History\n          </h3>\n           {/* Search Input */}\n          <div className=\"mb-4 relative\">\n             <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n               <SearchIcon className=\"h-5 w-5 text-muted-foreground\" aria-hidden=\"true\" />\n             </div>\n             <input\n               type=\"text\"\n               placeholder=\"Search fines...\"\n               value={searchTermFine}\n               onChange={(e) => setSearchTermFine(e.target.value)}\n               className=\"input-style block w-full pl-10 pr-3 py-2\" // Use class\n             />\n           </div>\n          {/* Table */}\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-border dark:divide-border\">\n              <thead className=\"bg-muted/50 dark:bg-muted/50\">\n                <tr>\n                  <th scope=\"col\" className=\"th-style\">Date</th> {/* Use class */}\n                  <th scope=\"col\" className=\"th-style\">Admin</th> {/* Use class */}\n                  <th scope=\"col\" className=\"th-style\">Fined Entity</th> {/* Use class */}\n                  <th scope=\"col\" className=\"th-style\">Amount</th> {/* Use class */}\n                  <th scope=\"col\" className=\"th-style\">Reason</th> {/* Use class */}\n                </tr>\n              </thead>\n              <tbody className=\"bg-card dark:bg-card divide-y divide-border dark:divide-border\">\n                 {filteredFineHistory.length > 0 ? (\n                  filteredFineHistory.map((record) => (\n                    <tr key={record.id}>\n                      <td className=\"td-style text-muted-foreground\">{record.timestamp.toLocaleString()}</td> {/* Use class */}\n                      <td className=\"td-style\">{record.actor}</td> {/* Use class */}\n                      <td className=\"td-style\">{record.target} ({record.targetType})</td> {/* Use class */}\n                      <td className=\"td-style text-red-600 dark:text-red-400 font-medium\">-{record.amount.toLocaleString()}</td> {/* Use class */}\n                      <td className=\"td-style text-muted-foreground max-w-xs truncate\" title={record.reason}>{record.reason}</td> {/* Use class */}\n                    </tr>\n                  ))\n                ) : (\n                  <tr><td colSpan={5} className=\"px-6 py-4 text-center text-sm text-muted-foreground\">{searchTermFine ? \"No matching fines found.\" : \"No fine history yet.\"}</td></tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// --- Economy Management Component ---\nfunction EconomyManagementTab() {\n  // --- State ---\n  const [activeSubTab, setActiveSubTab] = useState<EconomySubTab>(\"addActivity\");\n  const [showNotification, setShowNotification] = useState<boolean>(false);\n  const [notificationMessage, setNotificationMessage] = useState<string>(\"\");\n\n  // Mock Data (Replace with API calls - Use static dates)\n  const [activities, setActivities] = useState<Activity[]>([\n    { id: \"act1\", name: \"Daily Standup Report\", description: \"Submit daily progress report.\", pay: 50, frequency: \"Daily\", slots: 10, createdDate: new Date(\"2023-10-23T09:00:00Z\"), isActive: true },\n    { id: \"act2\", name: \"Code Review\", description: \"Review a peer's pull request.\", pay: 150, frequency: \"One-time\", slots: 5, createdDate: new Date(\"2023-10-25T14:00:00Z\"), isActive: true },\n    { id: \"act3\", name: \"Weekly Planning\", description: \"Participate in weekly team planning.\", pay: 200, frequency: \"Weekly\", slots: 15, createdDate: new Date(\"2023-10-21T10:00:00Z\"), isActive: false },\n  ]);\n  const [expenses, setExpenses] = useState<Expense[]>([\n    // Add some initial mock expenses if needed for testing\n    { id: \"exp1\", name: \"Monthly Software Subscription\", description: \"Fee for IDE license\", cost: 200, frequency: \"Monthly\", createdDate: new Date(\"2023-11-01T00:00:00Z\"), isActive: true },\n    { id: \"exp2\", name: \"Team Lunch Fund\", description: \"Contribution to weekly team lunch\", cost: 50, frequency: \"Weekly\", createdDate: new Date(\"2023-10-28T12:00:00Z\"), isActive: true },\n    { id: \"exp3\", name: \"Coffee Machine Maintenance\", description: \"Monthly upkeep\", cost: 75, frequency: \"Monthly\", createdDate: new Date(\"2023-10-15T08:00:00Z\"), isActive: false },\n  ]);\n  const [activityAssignments, setActivityAssignments] = useState<ActivityAssignment[]>([\n    // Add mock assignment for testing table\n    { id: \"assignAct1\", targetId: \"user1\", targetName: \"Alice\", targetType: \"user\", activityId: \"act1\", activityName: \"Daily Standup Report\", assignedDate: new Date(\"2023-11-05T10:00:00Z\"), assignedBy: \"Admin B\" },\n    { id: \"assignAct2\", targetId: \"groupA\", targetName: \"Developers\", targetType: \"group\", activityId: \"act2\", activityName: \"Code Review\", assignedDate: new Date(\"2023-11-06T11:00:00Z\"), assignedBy: \"Admin B\" },\n  ]);\n  const [expenseAssignments, setExpenseAssignments] = useState<ExpenseAssignment[]>([\n    // Add mock expense assignment for testing\n    { id: \"assignExp1\", targetId: \"user2\", targetName: \"Bob\", targetType: \"user\", expenseId: \"exp1\", expenseName: \"Monthly Software Subscription\", assignedDate: new Date(\"2023-11-02T09:30:00Z\"), assignedBy: \"Admin A\" },\n    { id: \"assignExp2\", targetId: \"groupA\", targetName: \"Developers\", targetType: \"group\", expenseId: \"exp2\", expenseName: \"Team Lunch Fund\", assignedDate: new Date(\"2023-11-03T13:00:00Z\"), assignedBy: \"Admin A\" },\n  ]);\n\n  // Form State - Add Activity\n  const [activityName, setActivityName] = useState(\"\");\n  const [activityDesc, setActivityDesc] = useState(\"\");\n  const [activityPay, setActivityPay] = useState(\"\");\n  const [activityFreq, setActivityFreq] = useState<Frequency>(\"One-time\");\n  const [activitySlots, setActivitySlots] = useState(\"\");\n\n  // Form State - Add Expense\n  const [expenseName, setExpenseName] = useState(\"\");\n  const [expenseDesc, setExpenseDesc] = useState(\"\");\n  const [expenseCost, setExpenseCost] = useState(\"\");\n  const [expenseFreq, setExpenseFreq] = useState<Frequency>(\"One-time\");\n\n  // Form State - Assign Activity\n  const [assignActivityTargetType, setAssignActivityTargetType] = useState<TargetType>(\"user\");\n  const [selectedAssignActivityTarget, setSelectedAssignActivityTarget] = useState<string>(\"\"); // User/Group ID\n  const [selectedActivityId, setSelectedActivityId] = useState<string>(\"\"); // Activity ID\n\n  // Form State - Assign Expense\n  const [assignExpenseTargetType, setAssignExpenseTargetType] = useState<TargetType>(\"user\");\n  const [selectedAssignExpenseTarget, setSelectedAssignExpenseTarget] = useState<string>(\"\"); // User/Group ID\n  const [selectedExpenseId, setSelectedExpenseId] = useState<string>(\"\"); // Expense ID\n\n  // Table State\n  const [activitySearchTerm, setActivitySearchTerm] = useState(\"\");\n  const [expenseSearchTerm, setExpenseSearchTerm] = useState(\"\");\n  const [activityAssignmentSearchTerm, setActivityAssignmentSearchTerm] = useState(\"\");\n  const [expenseAssignmentSearchTerm, setExpenseAssignmentSearchTerm] = useState(\"\"); // New search term for expense assignments\n\n  // --- Effects ---\n  useEffect(() => {\n    if (showNotification) {\n      const timer = setTimeout(() => {\n        setShowNotification(false);\n        setNotificationMessage(\"\");\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [showNotification]);\n\n  // --- Handlers ---\n  const handleShowNotification = (message: string) => {\n    setNotificationMessage(message);\n    setShowNotification(true);\n  };\n\n  // Activity Handlers\n  const handleAddActivity = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const pay = parseFloat(activityPay);\n    const slots = parseInt(activitySlots, 10);\n\n    if (!activityName.trim() || !activityDesc.trim()) {\n        alert(\"Please fill in Activity Name and Description.\");\n        return;\n    }\n    if (isNaN(pay) || pay <= 0) {\n        alert(\"Please enter a valid positive Pay amount.\");\n        return;\n    }\n     if (isNaN(slots) || slots <= 0) {\n        alert(\"Please enter a valid positive number for Slots Available.\");\n        return;\n    }\n\n    const newActivity: Activity = {\n        id: crypto.randomUUID(), // OK in event handler\n        name: activityName.trim(),\n        description: activityDesc.trim(),\n        pay: pay,\n        frequency: activityFreq,\n        slots: slots,\n        createdDate: new Date(), // OK in event handler\n        isActive: true, // Default to active\n    };\n\n    setActivities(prev => [newActivity, ...prev]);\n    handleShowNotification(`Activity '${newActivity.name}' created successfully.`);\n    console.log(`[Admin Action] Activity Created: ${newActivity.name} by Current Admin`); // Logging Placeholder\n\n    // Clear form\n    setActivityName(\"\");\n    setActivityDesc(\"\");\n    setActivityPay(\"\");\n    setActivityFreq(\"One-time\");\n    setActivitySlots(\"\");\n  };\n\n  const handleEditActivity = (id: string) => console.log(\"Edit Activity:\", id); // Placeholder\n  const handleDeleteActivity = (id: string) => {\n    const activityToDelete = activities.find(act => act.id === id);\n    if (!activityToDelete) return;\n\n    if (window.confirm(`Are you sure you want to delete the activity '${activityToDelete.name}'? This cannot be undone.`)) {\n        setActivities(prev => prev.filter(act => act.id !== id));\n        // Also remove any assignments related to this activity\n        setActivityAssignments(prev => prev.filter(assign => assign.activityId !== id));\n        handleShowNotification(`Activity '${activityToDelete.name}' deleted and unassigned.`);\n        console.log(`[Admin Action] Activity Deleted: ${activityToDelete.name} (ID: ${id}) by Current Admin`); // Logging Placeholder\n    }\n  };\n  const handleToggleActivityStatus = (id: string) => {\n    let activityName = \"\";\n    let newStatus = false;\n    setActivities(prev =>\n        prev.map(act => {\n            if (act.id === id) {\n                activityName = act.name;\n                newStatus = !act.isActive;\n                return { ...act, isActive: newStatus };\n            }\n            return act;\n        })\n    );\n    handleShowNotification(`Activity '${activityName}' status updated to ${newStatus ? 'Active' : 'Inactive'}.`);\n    console.log(`[Admin Action] Activity Status Toggled: ${activityName} (ID: ${id}) to ${newStatus ? 'Active' : 'Inactive'} by Current Admin`); // Logging Placeholder\n  };\n\n  // Expense Handlers\n  const handleAddExpense = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const cost = parseFloat(expenseCost);\n\n    if (!expenseName.trim() || !expenseDesc.trim()) {\n        alert(\"Please fill in Expense Name and Description.\");\n        return;\n    }\n    if (isNaN(cost) || cost <= 0) {\n        alert(\"Please enter a valid positive Cost amount.\");\n        return;\n    }\n\n    const newExpense: Expense = {\n        id: crypto.randomUUID(), // OK in event handler\n        name: expenseName.trim(),\n        description: expenseDesc.trim(),\n        cost: cost,\n        frequency: expenseFreq,\n        createdDate: new Date(), // OK in event handler\n        isActive: true, // Default to active\n    };\n\n    setExpenses(prev => [newExpense, ...prev]);\n    handleShowNotification(`Expense '${newExpense.name}' added successfully.`);\n    console.log(`[Admin Action] Expense Created: ${newExpense.name} by Current Admin`); // Logging Placeholder\n\n    // Clear form\n    setExpenseName(\"\");\n    setExpenseDesc(\"\");\n    setExpenseCost(\"\");\n    setExpenseFreq(\"One-time\");\n  };\n\n  const handleEditExpense = (id: string) => console.log(\"Edit Expense:\", id); // Placeholder\n  const handleDeleteExpense = (id: string) => {\n     const expenseToDelete = expenses.find(exp => exp.id === id);\n     if (!expenseToDelete) return;\n\n     if (window.confirm(`Are you sure you want to delete the expense '${expenseToDelete.name}'? This cannot be undone.`)) {\n        setExpenses(prev => prev.filter(exp => exp.id !== id));\n        // Also remove any assignments related to this expense\n        setExpenseAssignments(prev => prev.filter(assign => assign.expenseId !== id));\n        handleShowNotification(`Expense '${expenseToDelete.name}' deleted and unassigned.`);\n        console.log(`[Admin Action] Expense Deleted: ${expenseToDelete.name} (ID: ${id}) by Current Admin`); // Logging Placeholder\n    }\n  };\n  const handleToggleExpenseStatus = (id: string) => {\n    let expenseName = \"\";\n    let newStatus = false;\n    setExpenses(prev =>\n        prev.map(exp => {\n            if (exp.id === id) {\n                expenseName = exp.name;\n                newStatus = !exp.isActive;\n                return { ...exp, isActive: newStatus };\n            }\n            return exp;\n        })\n    );\n    handleShowNotification(`Expense '${expenseName}' status updated to ${newStatus ? 'Active' : 'Inactive'}.`);\n    console.log(`[Admin Action] Expense Status Toggled: ${expenseName} (ID: ${id}) to ${newStatus ? 'Active' : 'Inactive'} by Current Admin`); // Logging Placeholder\n  };\n\n  // Activity Assignment Handlers\n  const handleAssignActivity = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!selectedAssignActivityTarget) {\n        alert(`Please select a ${assignActivityTargetType}.`);\n        return;\n    }\n    if (!selectedActivityId) {\n        alert(\"Please select an activity to assign.\");\n        return;\n    }\n\n    const targetList = assignActivityTargetType === 'user' ? MOCK_USERS : MOCK_GROUPS;\n    const target = targetList.find(t => t.id === selectedAssignActivityTarget);\n    const activity = activities.find(a => a.id === selectedActivityId);\n\n    if (!target || !activity) {\n        alert(\"Selected target or activity not found.\"); // Should not happen with proper dropdowns\n        return;\n    }\n\n    // Check if this exact assignment already exists\n    const alreadyAssigned = activityAssignments.some(\n        assign => assign.targetId === target.id && assign.activityId === activity.id\n    );\n    if (alreadyAssigned) {\n        alert(`${activity.name} is already assigned to ${target.name}.`);\n        return;\n    }\n\n    const newAssignment: ActivityAssignment = {\n        id: crypto.randomUUID(), // OK in event handler\n        targetId: target.id,\n        targetName: target.name,\n        targetType: assignActivityTargetType,\n        activityId: activity.id,\n        activityName: activity.name,\n        assignedDate: new Date(), // OK in event handler\n        assignedBy: \"Current Admin\", // Placeholder\n    };\n\n    setActivityAssignments(prev => [newAssignment, ...prev]);\n    handleShowNotification(`Activity '${activity.name}' assigned to ${target.name}.`);\n    console.log(`[Admin Action] Activity Assigned: '${activity.name}' to ${target.name} (${assignActivityTargetType}) by Current Admin`); // Logging Placeholder\n\n    // Clear form\n    setSelectedAssignActivityTarget(\"\");\n    setSelectedActivityId(\"\");\n    // Keep assignActivityTargetType as is, user might want to assign more to the same type\n  };\n\n  const handleUnassignActivity = (assignmentId: string) => {\n    const assignment = activityAssignments.find(a => a.id === assignmentId);\n    if (!assignment) return;\n\n    if (window.confirm(`Are you sure you want to unassign '${assignment.activityName}' from '${assignment.targetName}'?`)) {\n        setActivityAssignments(prev => prev.filter(a => a.id !== assignmentId));\n        handleShowNotification(\"Activity unassigned successfully.\");\n        console.log(`[Admin Action] Activity Unassigned: '${assignment.activityName}' from ${assignment.targetName} (ID: ${assignmentId}) by Current Admin`); // Logging Placeholder\n    }\n  };\n\n  // Expense Assignment Handlers (NEW)\n  const handleAssignExpense = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!selectedAssignExpenseTarget) {\n        alert(`Please select a ${assignExpenseTargetType}.`);\n        return;\n    }\n    if (!selectedExpenseId) {\n        alert(\"Please select an expense to assign.\");\n        return;\n    }\n\n    const targetList = assignExpenseTargetType === 'user' ? MOCK_USERS : MOCK_GROUPS;\n    const target = targetList.find(t => t.id === selectedAssignExpenseTarget);\n    const expense = expenses.find(e => e.id === selectedExpenseId);\n\n    if (!target || !expense) {\n        alert(\"Selected target or expense not found.\");\n        return;\n    }\n\n    // Check if this exact assignment already exists\n    const alreadyAssigned = expenseAssignments.some(\n        assign => assign.targetId === target.id && assign.expenseId === expense.id\n    );\n    if (alreadyAssigned) {\n        alert(`${expense.name} is already assigned to ${target.name}.`);\n        return;\n    }\n\n    const newAssignment: ExpenseAssignment = {\n        id: crypto.randomUUID(), // OK in event handler\n        targetId: target.id,\n        targetName: target.name,\n        targetType: assignExpenseTargetType,\n        expenseId: expense.id,\n        expenseName: expense.name,\n        assignedDate: new Date(), // OK in event handler\n        assignedBy: \"Current Admin\", // Placeholder\n    };\n\n    setExpenseAssignments(prev => [newAssignment, ...prev]);\n    handleShowNotification(`Expense '${expense.name}' assigned to ${target.name}.`);\n    console.log(`[Admin Action] Expense Assigned: '${expense.name}' to ${target.name} (${assignExpenseTargetType}) by Current Admin`); // Logging Placeholder\n\n    // Clear form\n    setSelectedAssignExpenseTarget(\"\");\n    setSelectedExpenseId(\"\");\n    // Keep assignExpenseTargetType as is\n  };\n\n  const handleUnassignExpense = (assignmentId: string) => {\n    const assignment = expenseAssignments.find(a => a.id === assignmentId);\n    if (!assignment) return;\n\n    if (window.confirm(`Are you sure you want to unassign '${assignment.expenseName}' from '${assignment.targetName}'?`)) {\n        setExpenseAssignments(prev => prev.filter(a => a.id !== assignmentId));\n        handleShowNotification(\"Expense unassigned successfully.\");\n        console.log(`[Admin Action] Expense Unassigned: '${assignment.expenseName}' from ${assignment.targetName} (ID: ${assignmentId}) by Current Admin`); // Logging Placeholder\n    }\n  };\n\n\n  // --- Filtering & Derived Data ---\n  const filteredActivities = useMemo(() => {\n    if (!activitySearchTerm) return activities;\n    const lowerSearch = activitySearchTerm.toLowerCase();\n    return activities.filter(act =>\n        act.name.toLowerCase().includes(lowerSearch) ||\n        act.description.toLowerCase().includes(lowerSearch) ||\n        act.pay.toString().includes(lowerSearch) ||\n        act.frequency.toLowerCase().includes(lowerSearch) ||\n        act.slots.toString().includes(lowerSearch) ||\n        act.createdDate.toLocaleDateString().includes(lowerSearch)\n    );\n  }, [activities, activitySearchTerm]);\n\n  const filteredExpenses = useMemo(() => {\n    if (!expenseSearchTerm) return expenses;\n    const lowerSearch = expenseSearchTerm.toLowerCase();\n    return expenses.filter(exp =>\n        exp.name.toLowerCase().includes(lowerSearch) ||\n        exp.description.toLowerCase().includes(lowerSearch) ||\n        exp.cost.toString().includes(lowerSearch) ||\n        exp.frequency.toLowerCase().includes(lowerSearch) ||\n        exp.createdDate.toLocaleDateString().includes(lowerSearch)\n    );\n  }, [expenses, expenseSearchTerm]);\n\n  // Options for Assign Activity form\n  const assignActivityTargetOptions = useMemo(() => {\n    return assignActivityTargetType === \"user\" ? MOCK_USERS : MOCK_GROUPS;\n  }, [assignActivityTargetType]);\n\n  const activeActivities = useMemo(() => {\n    return activities.filter(act => act.isActive);\n  }, [activities]);\n\n  const filteredActivityAssignments = useMemo(() => {\n    if (!activityAssignmentSearchTerm) return activityAssignments;\n    const lowerSearch = activityAssignmentSearchTerm.toLowerCase();\n    return activityAssignments.filter(assign =>\n        assign.targetName.toLowerCase().includes(lowerSearch) ||\n        assign.activityName.toLowerCase().includes(lowerSearch) ||\n        assign.assignedBy.toLowerCase().includes(lowerSearch) ||\n        assign.assignedDate.toLocaleString().toLowerCase().includes(lowerSearch) ||\n        assign.targetType.toLowerCase().includes(lowerSearch)\n    );\n  }, [activityAssignments, activityAssignmentSearchTerm]);\n\n  // Options for Assign Expense form (NEW)\n  const assignExpenseTargetOptions = useMemo(() => {\n    return assignExpenseTargetType === \"user\" ? MOCK_USERS : MOCK_GROUPS;\n  }, [assignExpenseTargetType]);\n\n  const activeExpenses = useMemo(() => {\n    return expenses.filter(exp => exp.isActive);\n  }, [expenses]);\n\n  const filteredExpenseAssignments = useMemo(() => {\n    if (!expenseAssignmentSearchTerm) return expenseAssignments;\n    const lowerSearch = expenseAssignmentSearchTerm.toLowerCase();\n    return expenseAssignments.filter(assign =>\n        assign.targetName.toLowerCase().includes(lowerSearch) ||\n        assign.expenseName.toLowerCase().includes(lowerSearch) ||\n        assign.assignedBy.toLowerCase().includes(lowerSearch) ||\n        assign.assignedDate.toLocaleString().toLowerCase().includes(lowerSearch) ||\n        assign.targetType.toLowerCase().includes(lowerSearch)\n    );\n  }, [expenseAssignments, expenseAssignmentSearchTerm]);\n\n\n  // --- Render Logic ---\n  const renderSubTabContent = () => {\n    switch (activeSubTab) {\n      case \"addActivity\":\n        return (\n          <div className=\"space-y-6\">\n            {/* Add Activity Form */}\n            <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n              <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n                Create New Activity\n              </h3>\n              <form onSubmit={handleAddActivity} className=\"space-y-4\">\n                {/* Form Fields */}\n                <div>\n                  <label htmlFor=\"activityName\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">Activity Name</label>\n                  <input type=\"text\" id=\"activityName\" value={activityName} onChange={e => setActivityName(e.target.value)} required className=\"mt-1 block w-full input-style\" />\n                </div>\n                <div>\n                  <label htmlFor=\"activityDesc\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">Description</label>\n                  <textarea id=\"activityDesc\" value={activityDesc} onChange={e => setActivityDesc(e.target.value)} required rows={3} className=\"mt-1 block w-full input-style\" />\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                        <label htmlFor=\"activityPay\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">Pay (ESSENCE)</label>\n                        <input type=\"number\" id=\"activityPay\" value={activityPay} onChange={e => setActivityPay(e.target.value)} required min=\"0.01\" step=\"any\" className=\"mt-1 block w-full input-style\" />\n                    </div>\n                    <div>\n                        <label htmlFor=\"activityFreq\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">Payment Frequency</label>\n                        <select id=\"activityFreq\" value={activityFreq} onChange={e => setActivityFreq(e.target.value as Frequency)} required className=\"mt-1 block w-full input-style\">\n                            <option value=\"One-time\">One-time</option>\n                            <option value=\"Daily\">Daily</option>\n                            <option value=\"Weekly\">Weekly</option>\n                            <option value=\"Monthly\">Monthly</option>\n                        </select>\n                    </div>\n                    <div>\n                        <label htmlFor=\"activitySlots\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">Slots Available</label>\n                        <input type=\"number\" id=\"activitySlots\" value={activitySlots} onChange={e => setActivitySlots(e.target.value)} required min=\"1\" step=\"1\" className=\"mt-1 block w-full input-style\" />\n                    </div>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  <PlusCircleIcon className=\"-ml-1 mr-2 h-5 w-5\" /> Add Activity\n                </button>\n              </form>\n            </div>\n\n            {/* Activities Table */}\n            <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n              <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n                Existing Activities\n              </h3>\n              {/* Search Input */}\n              <div className=\"mb-4 relative\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <SearchIcon className=\"h-5 w-5 text-muted-foreground\" aria-hidden=\"true\" />\n                </div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search activities...\"\n                  value={activitySearchTerm}\n                  onChange={(e) => setActivitySearchTerm(e.target.value)}\n                  className=\"input-style block w-full pl-10 pr-3 py-2\" // Use class\n                />\n              </div>\n              {/* Table */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-border dark:divide-border\">\n                  <thead className=\"bg-muted/50 dark:bg-muted/50\">\n                    <tr>\n                      <th className=\"th-style\">Name</th>\n                      <th className=\"th-style\">Description</th>\n                      <th className=\"th-style text-right\">Pay</th>\n                      <th className=\"th-style\">Frequency</th>\n                      <th className=\"th-style text-center\">Slots</th>\n                      <th className=\"th-style\">Created</th>\n                      <th className=\"th-style text-center\">Status</th>\n                      <th className=\"th-style text-center\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-card dark:bg-card divide-y divide-border dark:divide-border\">\n                    {filteredActivities.length > 0 ? (\n                      filteredActivities.map((act) => (\n                        <tr key={act.id}>\n                          <td className=\"td-style font-medium\">{act.name}</td>\n                          <td className=\"td-style max-w-sm truncate\" title={act.description}>{act.description}</td>\n                          <td className=\"td-style text-right\">{act.pay.toLocaleString()}</td>\n                          <td className=\"td-style\">{act.frequency}</td>\n                          <td className=\"td-style text-center\">{act.slots}</td>\n                          <td className=\"td-style\">{act.createdDate.toLocaleDateString()}</td>\n                          <td className=\"td-style text-center\">\n                             <span className={cn(\n                                \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\",\n                                act.isActive ? \"bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300\" : \"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\"\n                             )}>\n                               {act.isActive ? \"Active\" : \"Inactive\"}\n                             </span>\n                          </td>\n                          <td className=\"td-style text-center\">\n                            <div className=\"flex justify-center items-center space-x-2\">\n                               <button onClick={() => handleEditActivity(act.id)} className=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\" title=\"Edit\">\n                                 <EditIcon className=\"h-4 w-4\" />\n                               </button>\n                               <button onClick={() => handleToggleActivityStatus(act.id)} className={cn(\"hover:text-opacity-80\", act.isActive ? \"text-yellow-600 dark:text-yellow-400\" : \"text-green-600 dark:text-green-400\")} title={act.isActive ? \"Deactivate\" : \"Activate\"}>\n                                 {act.isActive ? <ToggleLeftIcon className=\"h-4 w-4\" /> : <ToggleRightIcon className=\"h-4 w-4\" />}\n                               </button>\n                               <button onClick={() => handleDeleteActivity(act.id)} className=\"text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300\" title=\"Delete\">\n                                 <Trash2Icon className=\"h-4 w-4\" />\n                               </button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))\n                    ) : (\n                      <tr>\n                        <td colSpan={8} className=\"px-6 py-4 text-center text-sm text-muted-foreground\">\n                          {activitySearchTerm ? \"No matching activities found.\" : \"No activities created yet.\"}\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        );\n      case \"addExpense\":\n        return (\n          <div className=\"space-y-6\">\n            {/* Add Expense Form */}\n            <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n              <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n                Define New Expense\n              </h3>\n              <form onSubmit={handleAddExpense} className=\"space-y-4\">\n                {/* Form Fields */}\n                <div>\n                  <label htmlFor=\"expenseName\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">Expense Name</label>\n                  <input type=\"text\" id=\"expenseName\" value={expenseName} onChange={e => setExpenseName(e.target.value)} required className=\"mt-1 block w-full input-style\" />\n                </div>\n                <div>\n                  <label htmlFor=\"expenseDesc\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">Description</label>\n                  <textarea id=\"expenseDesc\" value={expenseDesc} onChange={e => setExpenseDesc(e.target.value)} required rows={3} className=\"mt-1 block w-full input-style\" />\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                        <label htmlFor=\"expenseCost\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">Cost (ESSENCE)</label>\n                        <input type=\"number\" id=\"expenseCost\" value={expenseCost} onChange={e => setExpenseCost(e.target.value)} required min=\"0.01\" step=\"any\" className=\"mt-1 block w-full input-style\" />\n                    </div>\n                    <div>\n                        <label htmlFor=\"expenseFreq\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">Expense Frequency</label>\n                        <select id=\"expenseFreq\" value={expenseFreq} onChange={e => setExpenseFreq(e.target.value as Frequency)} required className=\"mt-1 block w-full input-style\">\n                            <option value=\"One-time\">One-time</option>\n                            <option value=\"Daily\">Daily</option>\n                            <option value=\"Weekly\">Weekly</option>\n                            <option value=\"Monthly\">Monthly</option>\n                        </select>\n                    </div>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  <PlusCircleIcon className=\"-ml-1 mr-2 h-5 w-5\" /> Add Expense\n                </button>\n              </form>\n            </div>\n\n            {/* Expenses Table */}\n            <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n              <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n                Existing Expenses\n              </h3>\n              {/* Search Input */}\n              <div className=\"mb-4 relative\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <SearchIcon className=\"h-5 w-5 text-muted-foreground\" aria-hidden=\"true\" />\n                </div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search expenses...\"\n                  value={expenseSearchTerm}\n                  onChange={(e) => setExpenseSearchTerm(e.target.value)}\n                  className=\"input-style block w-full pl-10 pr-3 py-2\" // Use class\n                />\n              </div>\n              {/* Table */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-border dark:divide-border\">\n                  <thead className=\"bg-muted/50 dark:bg-muted/50\">\n                    <tr>\n                      <th className=\"th-style\">Name</th>\n                      <th className=\"th-style\">Description</th>\n                      <th className=\"th-style text-right\">Cost</th>\n                      <th className=\"th-style\">Frequency</th>\n                      <th className=\"th-style\">Created</th>\n                      <th className=\"th-style text-center\">Status</th>\n                      <th className=\"th-style text-center\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-card dark:bg-card divide-y divide-border dark:divide-border\">\n                    {filteredExpenses.length > 0 ? (\n                      filteredExpenses.map((exp) => (\n                        <tr key={exp.id}>\n                          <td className=\"td-style font-medium\">{exp.name}</td>\n                          <td className=\"td-style max-w-sm truncate\" title={exp.description}>{exp.description}</td>\n                          <td className=\"td-style text-right text-red-600 dark:text-red-400\">{exp.cost.toLocaleString()}</td>\n                          <td className=\"td-style\">{exp.frequency}</td>\n                          <td className=\"td-style\">{exp.createdDate.toLocaleDateString()}</td>\n                          <td className=\"td-style text-center\">\n                             <span className={cn(\n                                \"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\",\n                                exp.isActive ? \"bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300\" : \"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300\"\n                             )}>\n                               {exp.isActive ? \"Active\" : \"Inactive\"}\n                             </span>\n                          </td>\n                          <td className=\"td-style text-center\">\n                            <div className=\"flex justify-center items-center space-x-2\">\n                               <button onClick={() => handleEditExpense(exp.id)} className=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\" title=\"Edit\">\n                                 <EditIcon className=\"h-4 w-4\" />\n                               </button>\n                               <button onClick={() => handleToggleExpenseStatus(exp.id)} className={cn(\"hover:text-opacity-80\", exp.isActive ? \"text-yellow-600 dark:text-yellow-400\" : \"text-green-600 dark:text-green-400\")} title={exp.isActive ? \"Deactivate\" : \"Activate\"}>\n                                 {exp.isActive ? <ToggleLeftIcon className=\"h-4 w-4\" /> : <ToggleRightIcon className=\"h-4 w-4\" />}\n                               </button>\n                               <button onClick={() => handleDeleteExpense(exp.id)} className=\"text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300\" title=\"Delete\">\n                                 <Trash2Icon className=\"h-4 w-4\" />\n                               </button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))\n                    ) : (\n                      <tr>\n                        <td colSpan={7} className=\"px-6 py-4 text-center text-sm text-muted-foreground\">\n                          {expenseSearchTerm ? \"No matching expenses found.\" : \"No expenses defined yet.\"}\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        );\n      case \"assignActivity\":\n        return (\n          <div className=\"space-y-6\">\n            {/* Assign Activity Form */}\n            <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n              <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n                Assign Activity\n              </h3>\n              <form onSubmit={handleAssignActivity} className=\"space-y-4\">\n                {/* Target Type Toggle */}\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground dark:text-foreground mb-1\">Assign To</label>\n                  <div className=\"inline-flex rounded-md shadow-sm\" role=\"group\">\n                    <button\n                      type=\"button\"\n                      onClick={() => { setAssignActivityTargetType(\"user\"); setSelectedAssignActivityTarget(\"\"); }} // Reset selection\n                      className={cn(\n                        \"inline-flex items-center px-4 py-2 text-sm font-medium border border-input dark:border-input focus:z-10 focus:ring-2 focus:ring-ring focus:border-primary dark:focus:ring-offset-background\",\n                        assignActivityTargetType === \"user\"\n                          ? \"bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300 z-10 ring-1 ring-blue-500\"\n                          : \"bg-background text-foreground hover:bg-muted/50 dark:bg-background dark:text-foreground dark:hover:bg-muted/50\",\n                        \"rounded-l-lg\"\n                      )}\n                    >\n                      <UserIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n                      Individual User\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => { setAssignActivityTargetType(\"group\"); setSelectedAssignActivityTarget(\"\"); }} // Reset selection\n                      className={cn(\n                        \"inline-flex items-center px-4 py-2 text-sm font-medium border-t border-b border-r border-input dark:border-input focus:z-10 focus:ring-2 focus:ring-ring focus:border-primary dark:focus:ring-offset-background\",\n                        assignActivityTargetType === \"group\"\n                          ? \"bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300 z-10 ring-1 ring-blue-500\"\n                          : \"bg-background text-foreground hover:bg-muted/50 dark:bg-background dark:text-foreground dark:hover:bg-muted/50\",\n                        \"rounded-r-md\"\n                      )}\n                    >\n                      <UsersIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n                      Group\n                    </button>\n                  </div>\n                </div>\n\n                {/* User/Group Selector */}\n                <div>\n                  <label htmlFor=\"assignActivityTargetSelector\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">\n                    Select {assignActivityTargetType === \"user\" ? \"User\" : \"Group\"}\n                  </label>\n                  {/* Basic Select - Replace with searchable dropdown component later */}\n                  <select\n                    id=\"assignActivityTargetSelector\"\n                    name=\"assignActivityTargetSelector\"\n                    value={selectedAssignActivityTarget}\n                    onChange={(e) => setSelectedAssignActivityTarget(e.target.value)}\n                    required\n                    className=\"input-style mt-1\"\n                  >\n                    <option value=\"\" disabled>-- Select a {assignActivityTargetType} --</option>\n                    {assignActivityTargetOptions.map((option) => (\n                      <option key={option.id} value={option.id}>\n                        {option.name}\n                      </option>\n                    ))}\n                  </select>\n                  <p className=\"mt-1 text-xs text-muted-foreground dark:text-muted-foreground\">Note: This is a basic selector. A searchable dropdown will be implemented later.</p>\n                </div>\n\n                {/* Activity Selector */}\n                <div>\n                  <label htmlFor=\"assignActivitySelector\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">\n                    Select Activity\n                  </label>\n                  <select\n                    id=\"assignActivitySelector\"\n                    name=\"assignActivitySelector\"\n                    value={selectedActivityId}\n                    onChange={(e) => setSelectedActivityId(e.target.value)}\n                    required\n                    className=\"input-style mt-1\"\n                  >\n                    <option value=\"\" disabled>-- Select an active activity --</option>\n                    {activeActivities.length > 0 ? (\n                      activeActivities.map((activity) => (\n                        <option key={activity.id} value={activity.id}>\n                          {activity.name} (Pay: {activity.pay}, Freq: {activity.frequency})\n                        </option>\n                      ))\n                    ) : (\n                      <option value=\"\" disabled>No active activities available</option>\n                    )}\n                  </select>\n                </div>\n\n                {/* Submit Button */}\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  <LinkIcon className=\"-ml-1 mr-2 h-5 w-5\" /> Assign Activity\n                </button>\n              </form>\n            </div>\n\n            {/* Activity Assignments Table */}\n            <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n              <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n                Current Activity Assignments\n              </h3>\n              {/* Search Input */}\n              <div className=\"mb-4 relative\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <SearchIcon className=\"h-5 w-5 text-muted-foreground\" aria-hidden=\"true\" />\n                </div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search assignments (user, group, activity...)\"\n                  value={activityAssignmentSearchTerm}\n                  onChange={(e) => setActivityAssignmentSearchTerm(e.target.value)}\n                  className=\"input-style block w-full pl-10 pr-3 py-2\"\n                />\n              </div>\n              {/* Table */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-border dark:divide-border\">\n                  <thead className=\"bg-muted/50 dark:bg-muted/50\">\n                    <tr>\n                      <th className=\"th-style\">User/Group Name</th>\n                      <th className=\"th-style\">Activity Name</th>\n                      <th className=\"th-style\">Assigned Date</th>\n                      <th className=\"th-style\">Assigned By</th>\n                      <th className=\"th-style text-center\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-card dark:bg-card divide-y divide-border dark:divide-border\">\n                    {filteredActivityAssignments.length > 0 ? (\n                      filteredActivityAssignments.map((assign) => (\n                        <tr key={assign.id}>\n                          <td className=\"td-style font-medium\">{assign.targetName} ({assign.targetType})</td>\n                          <td className=\"td-style\">{assign.activityName}</td>\n                          <td className=\"td-style\">{assign.assignedDate.toLocaleString()}</td>\n                          <td className=\"td-style\">{assign.assignedBy}</td>\n                          <td className=\"td-style text-center\">\n                            <button\n                              onClick={() => handleUnassignActivity(assign.id)}\n                              className=\"text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 inline-flex items-center px-2 py-1 text-xs font-medium rounded border border-red-300 dark:border-red-600 hover:bg-red-50 dark:hover:bg-red-900/30\"\n                              title=\"Unassign\"\n                            >\n                              <XCircleIcon className=\"h-4 w-4 mr-1\" /> Unassign\n                            </button>\n                          </td>\n                        </tr>\n                      ))\n                    ) : (\n                      <tr>\n                        <td colSpan={5} className=\"px-6 py-4 text-center text-sm text-muted-foreground\">\n                          {activityAssignmentSearchTerm ? \"No matching assignments found.\" : \"No activities assigned yet.\"}\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        );\n      case \"assignExpense\": // NEW SECTION\n        return (\n          <div className=\"space-y-6\">\n            {/* Assign Expense Form */}\n            <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n              <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n                Assign Expense\n              </h3>\n              <form onSubmit={handleAssignExpense} className=\"space-y-4\">\n                {/* Target Type Toggle */}\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground dark:text-foreground mb-1\">Assign To</label>\n                  <div className=\"inline-flex rounded-md shadow-sm\" role=\"group\">\n                    <button\n                      type=\"button\"\n                      onClick={() => { setAssignExpenseTargetType(\"user\"); setSelectedAssignExpenseTarget(\"\"); }} // Reset selection\n                      className={cn(\n                        \"inline-flex items-center px-4 py-2 text-sm font-medium border border-input dark:border-input focus:z-10 focus:ring-2 focus:ring-ring focus:border-primary dark:focus:ring-offset-background\",\n                        assignExpenseTargetType === \"user\"\n                          ? \"bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300 z-10 ring-1 ring-blue-500\"\n                          : \"bg-background text-foreground hover:bg-muted/50 dark:bg-background dark:text-foreground dark:hover:bg-muted/50\",\n                        \"rounded-l-lg\"\n                      )}\n                    >\n                      <UserIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n                      Individual User\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => { setAssignExpenseTargetType(\"group\"); setSelectedAssignExpenseTarget(\"\"); }} // Reset selection\n                      className={cn(\n                        \"inline-flex items-center px-4 py-2 text-sm font-medium border-t border-b border-r border-input dark:border-input focus:z-10 focus:ring-2 focus:ring-ring focus:border-primary dark:focus:ring-offset-background\",\n                        assignExpenseTargetType === \"group\"\n                          ? \"bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300 z-10 ring-1 ring-blue-500\"\n                          : \"bg-background text-foreground hover:bg-muted/50 dark:bg-background dark:text-foreground dark:hover:bg-muted/50\",\n                        \"rounded-r-md\"\n                      )}\n                    >\n                      <UsersIcon className=\"-ml-1 mr-2 h-5 w-5\" />\n                      Group\n                    </button>\n                  </div>\n                </div>\n\n                {/* User/Group Selector */}\n                <div>\n                  <label htmlFor=\"assignExpenseTargetSelector\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">\n                    Select {assignExpenseTargetType === \"user\" ? \"User\" : \"Group\"}\n                  </label>\n                  {/* Basic Select - Replace with searchable dropdown component later */}\n                  <select\n                    id=\"assignExpenseTargetSelector\"\n                    name=\"assignExpenseTargetSelector\"\n                    value={selectedAssignExpenseTarget}\n                    onChange={(e) => setSelectedAssignExpenseTarget(e.target.value)}\n                    required\n                    className=\"input-style mt-1\"\n                  >\n                    <option value=\"\" disabled>-- Select a {assignExpenseTargetType} --</option>\n                    {assignExpenseTargetOptions.map((option) => (\n                      <option key={option.id} value={option.id}>\n                        {option.name}\n                      </option>\n                    ))}\n                  </select>\n                  <p className=\"mt-1 text-xs text-muted-foreground dark:text-muted-foreground\">Note: This is a basic selector. A searchable dropdown will be implemented later.</p>\n                </div>\n\n                {/* Expense Selector */}\n                <div>\n                  <label htmlFor=\"assignExpenseSelector\" className=\"block text-sm font-medium text-foreground dark:text-foreground\">\n                    Select Expense\n                  </label>\n                  <select\n                    id=\"assignExpenseSelector\"\n                    name=\"assignExpenseSelector\"\n                    value={selectedExpenseId}\n                    onChange={(e) => setSelectedExpenseId(e.target.value)}\n                    required\n                    className=\"input-style mt-1\"\n                  >\n                    <option value=\"\" disabled>-- Select an active expense --</option>\n                    {activeExpenses.length > 0 ? (\n                      activeExpenses.map((expense) => (\n                        <option key={expense.id} value={expense.id}>\n                          {expense.name} (Cost: {expense.cost}, Freq: {expense.frequency})\n                        </option>\n                      ))\n                    ) : (\n                      <option value=\"\" disabled>No active expenses available</option>\n                    )}\n                  </select>\n                </div>\n\n                {/* Submit Button */}\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  <LinkIcon className=\"-ml-1 mr-2 h-5 w-5\" /> Assign Expense\n                </button>\n              </form>\n            </div>\n\n            {/* Expense Assignments Table */}\n            <div className=\"bg-card dark:bg-card shadow rounded-lg p-6\">\n              <h3 className=\"text-lg font-medium leading-6 text-card-foreground dark:text-card-foreground mb-4\">\n                Current Expense Assignments\n              </h3>\n              {/* Search Input */}\n              <div className=\"mb-4 relative\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <SearchIcon className=\"h-5 w-5 text-muted-foreground\" aria-hidden=\"true\" />\n                </div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Search assignments (user, group, expense...)\"\n                  value={expenseAssignmentSearchTerm}\n                  onChange={(e) => setExpenseAssignmentSearchTerm(e.target.value)}\n                  className=\"input-style block w-full pl-10 pr-3 py-2\"\n                />\n              </div>\n              {/* Table */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-border dark:divide-border\">\n                  <thead className=\"bg-muted/50 dark:bg-muted/50\">\n                    <tr>\n                      <th className=\"th-style\">User/Group Name</th>\n                      <th className=\"th-style\">Expense Name</th>\n                      <th className=\"th-style\">Assigned Date</th>\n                      <th className=\"th-style\">Assigned By</th>\n                      <th className=\"th-style text-center\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-card dark:bg-card divide-y divide-border dark:divide-border\">\n                    {filteredExpenseAssignments.length > 0 ? (\n                      filteredExpenseAssignments.map((assign) => (\n                        <tr key={assign.id}>\n                          <td className=\"td-style font-medium\">{assign.targetName} ({assign.targetType})</td>\n                          <td className=\"td-style\">{assign.expenseName}</td>\n                          <td className=\"td-style\">{assign.assignedDate.toLocaleString()}</td>\n                          <td className=\"td-style\">{assign.assignedBy}</td>\n                          <td className=\"td-style text-center\">\n                            <button\n                              onClick={() => handleUnassignExpense(assign.id)}\n                              className=\"text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 inline-flex items-center px-2 py-1 text-xs font-medium rounded border border-red-300 dark:border-red-600 hover:bg-red-50 dark:hover:bg-red-900/30\"\n                              title=\"Unassign\"\n                            >\n                              <XCircleIcon className=\"h-4 w-4 mr-1\" /> Unassign\n                            </button>\n                          </td>\n                        </tr>\n                      ))\n                    ) : (\n                      <tr>\n                        <td colSpan={5} className=\"px-6 py-4 text-center text-sm text-muted-foreground\">\n                          {expenseAssignmentSearchTerm ? \"No matching assignments found.\" : \"No expenses assigned yet.\"}\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  // Placeholder for permission check\n  const isAdmin = true; // Replace with actual permission logic\n  if (!isAdmin) {\n    return (\n      <div className=\"p-4 border rounded-b-md dark:border-gray-700\">\n        <p className=\"text-destructive dark:text-destructive-foreground\">Access Denied. You do not have permission to manage the economy.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 border rounded-b-md dark:border-gray-700 space-y-6 relative\">\n       {/* Success Notification */}\n       {showNotification && (\n        <div\n          className=\"fixed top-20 right-6 z-50 p-4 mb-4 text-sm text-green-800 rounded-lg bg-green-100 dark:bg-green-900 dark:text-green-300 shadow-lg border border-green-300 dark:border-green-600\"\n          role=\"alert\"\n        >\n          <div className=\"flex items-center\">\n            <CheckCircleIcon className=\"flex-shrink-0 inline w-5 h-5 mr-3\" />\n            <span className=\"font-medium\">{notificationMessage}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Sub-tab Navigation */}\n      <div className=\"border-b border-border dark:border-border\">\n        <nav className=\"-mb-px flex space-x-6 overflow-x-auto\" aria-label=\"Tabs\">\n          <button\n            onClick={() => setActiveSubTab(\"addActivity\")}\n            className={cn(\n              \"whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm\",\n              activeSubTab === \"addActivity\"\n                ? \"border-primary text-primary dark:border-primary dark:text-primary\"\n                : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border dark:hover:text-foreground dark:hover:border-border\"\n            )}\n          >\n            Add Activity\n          </button>\n          <button\n            onClick={() => setActiveSubTab(\"addExpense\")}\n            className={cn(\n              \"whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm\",\n              activeSubTab === \"addExpense\"\n                ? \"border-primary text-primary dark:border-primary dark:text-primary\"\n                : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border dark:hover:text-foreground dark:hover:border-border\"\n            )}\n          >\n            Add Expense\n          </button>\n          <button\n            onClick={() => setActiveSubTab(\"assignActivity\")}\n            className={cn(\n              \"whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm\",\n              activeSubTab === \"assignActivity\"\n                ? \"border-primary text-primary dark:border-primary dark:text-primary\"\n                : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border dark:hover:text-foreground dark:hover:border-border\"\n            )}\n          >\n            Assign Activity\n          </button>\n           <button\n            onClick={() => setActiveSubTab(\"assignExpense\")}\n            className={cn(\n              \"whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm\",\n              activeSubTab === \"assignExpense\"\n                ? \"border-primary text-primary dark:border-primary dark:text-primary\"\n                : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border dark:hover:text-foreground dark:hover:border-border\"\n            )}\n          >\n            Assign Expense\n          </button>\n        </nav>\n      </div>\n\n      {/* Sub-tab Content */}\n      <div className=\"mt-4\">\n        {renderSubTabContent()}\n      </div>\n    </div>\n  );\n}\n\n\n// --- Main Management Component ---\nexport default function Management() {\n  const [activeTab, setActiveTab] = useState<Tab>(\"currency\");\n\n  // Client-side only state to prevent hydration mismatch for initial tab\n  const [isClient, setIsClient] = useState(false);\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n\n  const renderContent = () => {\n    // Avoid rendering tab content on the server or before hydration,\n    // especially if initial state relies on potentially mismatched values.\n    // Or, ensure initial state is *always* identical server/client.\n    // For now, let's delay rendering content until client-side mount.\n    if (!isClient) {\n       // Optionally return a placeholder or null during SSR/hydration phase\n       // This helps if the initial state calculation is complex or differs.\n       // However, fixing the initial state (like we did with dates) is the better approach.\n       // We keep this `isClient` check as an extra safety measure for now.\n       return null;\n    }\n\n    switch (activeTab) {\n      case \"currency\":\n        return <CurrencyManagementTab />;\n      case \"behavior\":\n        return <BehaviorManagementTab />;\n      case \"economy\":\n        return <EconomyManagementTab />; // Use the new component\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 md:p-6\">\n      <h1 className=\"text-2xl font-semibold mb-6\">Management Console</h1>\n\n      <div className=\"flex border-b border-border dark:border-border\">\n        <button\n          onClick={() => setActiveTab(\"currency\")}\n          className={cn(\n            \"flex items-center gap-2 px-4 py-3 -mb-px border-b-2 text-sm font-medium focus:outline-none\",\n            activeTab === \"currency\"\n              ? \"border-primary text-primary dark:border-primary dark:text-primary\"\n              : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border dark:hover:text-foreground dark:hover:border-border\"\n          )}\n        >\n          <CurrencyIcon className=\"h-5 w-5\" />\n          Currency\n        </button>\n        <button\n          onClick={() => setActiveTab(\"behavior\")}\n          className={cn(\n            \"flex items-center gap-2 px-4 py-3 -mb-px border-b-2 text-sm font-medium focus:outline-none\",\n            activeTab === \"behavior\"\n              ? \"border-primary text-primary dark:border-primary dark:text-primary\"\n              : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border dark:hover:text-foreground dark:hover:border-border\"\n          )}\n        >\n          <BehaviorIcon className=\"h-5 w-5\" />\n          Behavior\n        </button>\n        <button\n          onClick={() => setActiveTab(\"economy\")}\n          className={cn(\n            \"flex items-center gap-2 px-4 py-3 -mb-px border-b-2 text-sm font-medium focus:outline-none\",\n            activeTab === \"economy\"\n              ? \"border-primary text-primary dark:border-primary dark:text-primary\"\n              : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border dark:hover:text-foreground dark:hover:border-border\"\n          )}\n        >\n          <EconomyIcon className=\"h-5 w-5\" />\n          Economy\n        </button>\n      </div>\n\n      <div className=\"mt-0\"> {/* Content area below tabs */}\n        {renderContent()}\n      </div>\n    </div>\n  );\n}\n","import type { MetaFunction } from \"@remix-run/node\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Life Economy - Account Settings\" },\n    { name: \"description\", content: \"Manage your account settings.\" },\n  ];\n};\n\nexport default function AccountSettings() {\n  return (\n    <div className=\"mx-auto max-w-4xl space-y-8\">\n      <h1 className=\"text-3xl font-bold\">Account Settings</h1>\n\n      {/* Profile Information Section */}\n      <div className=\"rounded-lg border bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-950\">\n        <h2 className=\"mb-1 text-xl font-semibold\">Profile Information</h2>\n        <p className=\"mb-6 text-sm text-gray-500 dark:text-gray-400\">\n          Manage your account details and preferences\n        </p>\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n          <div>\n            <label className=\"mb-1 block text-xs font-medium text-gray-500 dark:text-gray-400\">\n              Username\n            </label>\n            <p className=\"text-sm\">johndoe</p>\n          </div>\n          <div>\n            <label className=\"mb-1 block text-xs font-medium text-gray-500 dark:text-gray-400\">\n              User ID\n            </label>\n            <p className=\"text-sm\">user123</p>\n          </div>\n          <div>\n            <label className=\"mb-1 block text-xs font-medium text-gray-500 dark:text-gray-400\">\n              Name\n            </label>\n            <p className=\"text-sm\">John Doe</p>\n          </div>\n          <div>\n            <label className=\"mb-1 block text-xs font-medium text-gray-500 dark:text-gray-400\">\n              Email\n            </label>\n            <p className=\"text-sm\">john.doe@example.com</p>\n          </div>\n          <div>\n            <label className=\"mb-1 block text-xs font-medium text-gray-500 dark:text-gray-400\">\n              Member Since\n            </label>\n            <p className=\"text-sm\">1/12/2025</p>\n          </div>\n          <div>\n            <label className=\"mb-1 block text-xs font-medium text-gray-500 dark:text-gray-400\">\n              Notifications\n            </label>\n            <p className=\"text-sm\">Enabled</p>\n          </div>\n        </div>\n        <button className=\"mt-6 rounded-md bg-gray-900 px-4 py-2 text-sm font-medium text-white hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-200 dark:focus:ring-gray-300 dark:focus:ring-offset-gray-950\">\n          Edit Profile\n        </button>\n      </div>\n\n      {/* Security Section */}\n      <div className=\"rounded-lg border bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-950\">\n        <h2 className=\"mb-1 text-xl font-semibold\">Security</h2>\n        <p className=\"mb-6 text-sm text-gray-500 dark:text-gray-400\">\n          Manage your password and security settings\n        </p>\n        <div className=\"space-y-4\">\n          <div>\n            <h3 className=\"font-medium\">Password</h3>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n              Your password was last changed on 3/28/2025\n            </p>\n            <button className=\"mt-2 text-sm font-medium text-blue-600 hover:underline dark:text-blue-400\">\n              Change password\n            </button>\n          </div>\n          <hr className=\"dark:border-gray-700\" />\n          <div>\n            <h3 className=\"font-medium\">Two-Factor Authentication</h3>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n              Add an extra layer of security to your account\n            </p>\n            <button className=\"mt-2 text-sm font-medium text-blue-600 hover:underline dark:text-blue-400\">\n              Enable two-factor authentication\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import type { MetaFunction, ActionFunctionArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, useActionData, useNavigation } from \"@remix-run/react\";\nimport { useState, useEffect, useMemo } from \"react\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Life Economy - Transfer ESSENCE\" },\n    { name: \"description\", content: \"Transfer ESSENCE to other users\" },\n  ];\n};\n\n// Define simple types for clarity\ntype User = {\n  id: string;\n  name: string;\n  balance: number;\n  avatar: string;\n};\n\ntype Transaction = {\n  id: string;\n  amount: number;\n  recipientId: string;\n  recipientName: string;\n  note?: string;\n  timestamp: string;\n};\n\n// Generate dummy users\nconst generateUsers = (): User[] => {\n  const names = [\"Alex\", \"Jamie\", \"Taylor\", \"Morgan\", \"Casey\", \"Riley\", \"Jordan\", \"Quinn\"];\n  const surnames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Garcia\", \"Miller\", \"Davis\"];\n\n  return Array.from({ length: 8 }, (_, i) => ({\n    id: `user${i + 1000}`,\n    name: `${names[i % names.length]} ${surnames[i % surnames.length]}`,\n    balance: Math.floor(Math.random() * 10000) + 500,\n    avatar: `https://i.pravatar.cc/150?img=${i + 10}`\n  }));\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const amount = Number(formData.get(\"amount\"));\n  const recipientId = formData.get(\"recipient\") as string;\n  const note = formData.get(\"note\") as string;\n\n  // Validate inputs\n  if (!amount || amount <= 0) {\n    return json({ error: \"Please enter a valid amount\" }, { status: 400 });\n  }\n\n  if (!recipientId) {\n    return json({ error: \"Please select a recipient\" }, { status: 400 });\n  }\n\n  // Get recipient name for success message\n  const users = generateUsers();\n  const recipient = users.find(u => u.id === recipientId);\n\n  // In a real app, this would interact with your backend\n  return json({\n    success: true,\n    message: `Successfully transferred ${amount} ESSENCE to ${recipient?.name || recipientId}`,\n    transaction: {\n      id: `tx${Date.now()}`,\n      amount,\n      recipientId,\n      recipientName: recipient?.name || recipientId,\n      note,\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nexport default function Transfer() {\n  const [users, setUsers] = useState<User[]>(generateUsers());\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"\"); // For controlled select\n  const [recentTransfers, setRecentTransfers] = useState<Transaction[]>([]);\n  const [formKey, setFormKey] = useState<number>(0); // Used to reset form\n  const [searchTerm, setSearchTerm] = useState<string>(\"\"); // State for search term\n  const actionData = useActionData<typeof action>();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === \"submitting\";\n\n  // Filter users based on search term\n  const filteredUsers = useMemo(() => {\n    if (!searchTerm) {\n      return users;\n    }\n    const lowerCaseSearchTerm = searchTerm.toLowerCase();\n    return users.filter(user =>\n      user.name.toLowerCase().includes(lowerCaseSearchTerm) ||\n      user.id.toLowerCase().includes(lowerCaseSearchTerm)\n    );\n  }, [users, searchTerm]);\n\n  useEffect(() => {\n    if (actionData?.success) {\n      // Refresh user data after successful transfer (optional, depends on real data source)\n      // setUsers(generateUsers());\n\n      // Add the new transaction to recent transfers\n      setRecentTransfers(prev => [\n        {\n          id: actionData.transaction.id,\n          amount: actionData.transaction.amount,\n          recipientId: actionData.transaction.recipientId,\n          recipientName: actionData.transaction.recipientName,\n          note: actionData.transaction.note,\n          timestamp: actionData.transaction.timestamp\n        },\n        ...prev.slice(0, 2) // Keep only the 3 most recent\n      ]);\n\n      // Reset form fields by changing the key\n      setFormKey(prev => prev + 1);\n      // Clear selected user and search term\n      setSelectedUser(null);\n      setSelectedUserId(\"\");\n      setSearchTerm(\"\");\n    }\n  }, [actionData]);\n\n  const handleRecipientChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const userId = e.target.value;\n    setSelectedUserId(userId);\n    const user = users.find(u => u.id === userId);\n    setSelectedUser(user || null);\n  };\n\n  return (\n    <div className=\"mx-auto max-w-4xl space-y-8\">\n      <h1 className=\"text-3xl font-bold\">Transfer ESSENCE</h1>\n\n      <div className=\"rounded-lg border bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-950\">\n        {actionData?.success ? (\n          <div className=\"mb-6 rounded-md bg-green-50 p-4 text-green-800 dark:bg-green-900 dark:text-green-50\">\n            <p className=\"font-medium\">{actionData.message}</p>\n            <p className=\"mt-2 text-sm\">\n              Transaction ID: {actionData.transaction.id}\n            </p>\n          </div>\n        ) : actionData?.error ? (\n          <div className=\"mb-6 rounded-md bg-red-50 p-4 text-red-800 dark:bg-red-900 dark:text-red-50\">\n            <p className=\"font-medium\">{actionData.error}</p>\n          </div>\n        ) : null}\n\n        <Form key={formKey} method=\"post\" className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"search-recipient\" className=\"mb-2 block text-sm font-medium text-gray-900 dark:text-gray-100\">\n              Search Recipient\n            </label>\n            <input\n              type=\"text\"\n              id=\"search-recipient\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              placeholder=\"Search by name or ID...\"\n              className=\"mb-2 block w-full rounded-md border border-gray-300 bg-white p-2 text-sm text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white\"\n            />\n            <label htmlFor=\"recipient\" className=\"sr-only\"> {/* Screen reader only label */}\n              Select Recipient\n            </label>\n            <select\n              id=\"recipient\"\n              name=\"recipient\"\n              value={selectedUserId} // Controlled component\n              className=\"block w-full rounded-md border border-gray-300 bg-white p-2 text-sm text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white\"\n              onChange={handleRecipientChange}\n              required\n            >\n              <option value=\"\" disabled={!!selectedUserId}>Select a user</option> {/* Disable placeholder if a user is selected */}\n              {filteredUsers.map((user) => (\n                <option key={user.id} value={user.id} className=\"text-gray-900 dark:text-white\"> {/* Ensure contrast */}\n                  {user.name} ({user.id})\n                </option>\n              ))}\n              {filteredUsers.length === 0 && searchTerm && (\n                <option value=\"\" disabled className=\"text-gray-500 dark:text-gray-400\">No users found</option>\n              )}\n            </select>\n          </div>\n\n          {selectedUser && (\n            <div className=\"flex items-center gap-4 rounded-md border p-4 dark:border-gray-700\">\n              <img\n                src={selectedUser.avatar}\n                alt={selectedUser.name}\n                className=\"h-12 w-12 rounded-full\"\n              />\n              <div>\n                <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">{selectedUser.name}</h3>\n              </div>\n            </div>\n          )}\n\n          <div>\n            <label htmlFor=\"amount\" className=\"mb-2 block text-sm font-medium text-gray-900 dark:text-gray-100\">\n              Amount (ESSENCE)\n            </label>\n            <input\n              type=\"number\"\n              id=\"amount\"\n              name=\"amount\"\n              min=\"1\"\n              step=\"1\"\n              className=\"block w-full rounded-md border border-gray-300 bg-white p-2 text-sm text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white\"\n              placeholder=\"Enter amount\"\n              required\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"note\" className=\"mb-2 block text-sm font-medium text-gray-900 dark:text-gray-100\">\n              Note (Optional)\n            </label>\n            <textarea\n              id=\"note\"\n              name=\"note\"\n              rows={3}\n              className=\"block w-full rounded-md border border-gray-300 bg-white p-2 text-sm text-gray-900 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-white\"\n              placeholder=\"Add a note about this transfer\"\n            />\n          </div>\n\n          <div className=\"flex justify-center\">\n            <button\n              type=\"submit\"\n              disabled={isSubmitting || !selectedUserId} // Disable if submitting or no recipient selected\n              className=\"rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 dark:bg-blue-800 dark:hover:bg-blue-700 dark:focus:ring-blue-600 dark:focus:ring-offset-gray-950\"\n            >\n              {isSubmitting ? \"Processing...\" : \"Transfer ESSENCE\"}\n            </button>\n          </div>\n        </Form>\n      </div>\n\n      <div className=\"rounded-lg border bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-950\">\n        <h2 className=\"mb-4 text-xl font-semibold text-gray-900 dark:text-gray-100\">Recent Transfers</h2>\n        <div className=\"space-y-4\">\n          {recentTransfers.length > 0 ? (\n            recentTransfers.map((transfer) => {\n              // Find user data locally, fallback if user list changed or not found\n              const user = users.find(u => u.id === transfer.recipientId) || {\n                name: transfer.recipientName || `User ${transfer.recipientId}`,\n                avatar: `https://i.pravatar.cc/150?u=${transfer.recipientId}` // Use ID for consistent placeholder avatar\n              };\n              return (\n                <div key={transfer.id} className=\"flex items-center justify-between rounded-md border p-4 dark:border-gray-700\">\n                  <div className=\"flex items-center gap-4\">\n                    <img\n                      src={user.avatar}\n                      alt=\"Recipient\"\n                      className=\"h-10 w-10 rounded-full\"\n                    />\n                    <div>\n                      <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">{user.name}</h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {new Date(transfer.timestamp).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium text-green-600 dark:text-green-400\">\n                      -{transfer.amount} ESSENCE\n                    </p>\n                    {transfer.note && (\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {transfer.note}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              );\n            })\n          ) : (\n            // Placeholder content if no recent transfers\n            <p className=\"text-center text-gray-500 dark:text-gray-400\">No recent transfers to display.</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import type { MetaFunction } from \"@remix-run/node\";\nimport { Link } from \"@remix-run/react\"; // Import Link\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Life Economy - Dashboard\" },\n    { name: \"description\", content: \"Welcome to Life Economy!\" },\n  ];\n};\n\nexport default function Index() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"mb-6 text-3xl font-bold\">Dashboard</h1>\n      <p className=\"mb-4\">Welcome to your Life Economy dashboard.</p>\n      {/* Placeholder for dashboard content */}\n      <div className=\"rounded-lg border bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-900\">\n        <h2 className=\"mb-4 text-xl font-semibold\">Overview</h2>\n        <p>Your dashboard content will appear here.</p>\n        <p className=\"mt-4\">\n          Navigate using the header links. Let's start with{\" \"}\n          <Link to=\"/settings\" className=\"text-blue-600 hover:underline dark:text-blue-400\">\n            Account Settings\n          </Link>.\n        </p>\n      </div>\n    </div>\n  );\n}\n","import { Link } from \"@remix-run/react\";\n\nfunction AlertTriangleIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\" />\n      <path d=\"M12 9v4\" />\n      <path d=\"M12 17h.01\" />\n    </svg>\n  );\n}\n\n\nexport function AccessDenied({ requiredRole = \"Super Admin\" }: { requiredRole?: string }) {\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-[calc(100vh-10rem)] text-center p-6\">\n      <AlertTriangleIcon className=\"w-16 h-16 text-destructive dark:text-destructive-foreground mb-4\" />\n      <h1 className=\"text-3xl font-bold text-destructive dark:text-destructive-foreground mb-2\">Access Denied</h1>\n      <p className=\"text-lg text-muted-foreground dark:text-muted-foreground mb-6\">\n        You do not have the required permissions ({requiredRole}) to view this page.\n      </p>\n      <Link\n        to=\"/\" // Link to the dashboard or home page\n        className=\"btn btn-secondary\" // Use button styling\n      >\n        Go to Homepage\n      </Link>\n    </div>\n  );\n}\n","import React from 'react';\nimport type { User, UserRole, UserStatus } from '~/types/admin';\nimport { cn } from '~/lib/utils';\n\n// --- Icons ---\nfunction ViewIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/></svg>\n  );\n}\nfunction EditIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n  );\n}\nfunction DeleteIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"/><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"/><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"/><line x1=\"10\" x2=\"10\" y1=\"11\" y2=\"17\"/><line x1=\"14\" x2=\"14\" y1=\"11\" y2=\"17\"/></svg>\n  );\n}\nfunction SuspendIcon(props: React.SVGProps<SVGSVGElement>) { // Using PauseCircle\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><line x1=\"10\" x2=\"10\" y1=\"15\" y2=\"9\"/><line x1=\"14\" x2=\"14\" y1=\"15\" y2=\"9\"/></svg>\n  );\n}\nfunction RestoreIcon(props: React.SVGProps<SVGSVGElement>) { // Using PlayCircle\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><polygon points=\"10 8 16 12 10 16 10 8\"/></svg>\n  );\n}\nfunction PasswordIcon(props: React.SVGProps<SVGSVGElement>) { // Using KeyRound\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M2 18v3c0 .6.4 1 1 1h4v-3h3v-3h2l1.4-1.4a6.5 6.5 0 1 0-4-4Z\"/><circle cx=\"16.5\" cy=\"7.5\" r=\".5\"/></svg>\n  );\n}\n\n\ninterface UsersTableProps {\n  users: User[];\n  onViewProfile: (user: User) => void;\n  onEdit: (user: User) => void;\n  onDelete: (user: User) => void;\n  onSuspend: (user: User) => void;\n  onRestore: (user: User) => void;\n  onChangePassword: (user: User) => void;\n}\n\nexport function UsersTable({\n  users,\n  onViewProfile,\n  onEdit,\n  onDelete,\n  onSuspend,\n  onRestore,\n  onChangePassword,\n}: UsersTableProps) {\n\n  const getStatusClass = (status: UserStatus) => {\n    switch (status) {\n      case 'Active': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'Suspended': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200';\n    }\n  };\n\n  const getRoleClass = (role: UserRole) => {\n     switch (role) {\n      case 'Super Admin': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'Admin': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      case 'User': return 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200';\n    }\n  }\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n        <thead className=\"bg-gray-50 dark:bg-gray-800\">\n          <tr>\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Full Name</th>\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Email</th>\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Group</th>\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Role</th>\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Status</th>\n            <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Actions</th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200 dark:bg-gray-900 dark:divide-gray-700\">\n          {users.length === 0 ? (\n            <tr>\n              <td colSpan={6} className=\"px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400\">\n                No users found matching your criteria.\n              </td>\n            </tr>\n          ) : (\n            users.map((user) => (\n              <tr key={user.id}>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">{user.fullName}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{user.email}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{user.groupName}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                   <span className={cn(\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\", getRoleClass(user.role))}>\n                    {user.role}\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                  <span className={cn(\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full\", getStatusClass(user.status))}>\n                    {user.status}\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-1\">\n                  <button onClick={() => onViewProfile(user)} className=\"text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-200 p-1\" title=\"View Profile\">\n                    <ViewIcon className=\"h-5 w-5\" />\n                  </button>\n                  <button onClick={() => onEdit(user)} className=\"text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-200 p-1\" title=\"Edit User\">\n                     <EditIcon className=\"h-5 w-5\" />\n                  </button>\n                   {user.status === 'Active' ? (\n                    <button onClick={() => onSuspend(user)} className=\"text-yellow-600 hover:text-yellow-900 dark:text-yellow-400 dark:hover:text-yellow-200 p-1\" title=\"Suspend User\">\n                      <SuspendIcon className=\"h-5 w-5\" />\n                    </button>\n                  ) : (\n                    <button onClick={() => onRestore(user)} className=\"text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-200 p-1\" title=\"Restore User\">\n                      <RestoreIcon className=\"h-5 w-5\" />\n                    </button>\n                  )}\n                   <button onClick={() => onChangePassword(user)} className=\"text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-200 p-1\" title=\"Change Password\">\n                     <PasswordIcon className=\"h-5 w-5\" />\n                  </button>\n                  <button onClick={() => onDelete(user)} className=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-200 p-1\" title=\"Delete User\">\n                    <DeleteIcon className=\"h-5 w-5\" />\n                  </button>\n                </td>\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import type { User, Group, UserRole, UserStatus } from \"~/types/admin\";\n\nexport const mockGroups: Group[] = [\n  { id: \"g1\", name: \"Development Team\" },\n  { id: \"g2\", name: \"Marketing Department\" },\n  { id: \"g3\", name: \"Support Staff\" },\n  { id: \"g4\", name: \"Unassigned\" },\n];\n\nexport const mockUsers: User[] = [\n  {\n    id: \"u1\",\n    fullName: \"Alice Wonderland\",\n    email: \"alice@example.com\",\n    groupId: \"g1\",\n    role: \"Super Admin\",\n    status: \"Active\",\n    balance: 1500,\n    createdAt: \"2023-10-01\",\n  },\n  {\n    id: \"u2\",\n    fullName: \"Bob The Builder\",\n    email: \"bob@example.com\",\n    groupId: \"g1\",\n    role: \"Admin\",\n    status: \"Active\",\n    balance: 800,\n    createdAt: \"2023-10-05\",\n  },\n  {\n    id: \"u3\",\n    fullName: \"Charlie Chaplin\",\n    email: \"charlie@example.com\",\n    groupId: \"g2\",\n    role: \"User\",\n    status: \"Active\",\n    balance: 350,\n    createdAt: \"2023-10-10\",\n  },\n  {\n    id: \"u4\",\n    fullName: \"Diana Prince\",\n    email: \"diana@example.com\",\n    groupId: \"g2\",\n    role: \"User\",\n    status: \"Suspended\",\n    balance: 50,\n    createdAt: \"2023-10-15\",\n  },\n  {\n    id: \"u5\",\n    fullName: \"Ethan Hunt\",\n    email: \"ethan@example.com\",\n    groupId: \"g3\",\n    role: \"User\",\n    status: \"Active\",\n    balance: 1200,\n    createdAt: \"2023-11-01\",\n  },\n  {\n    id: \"u6\",\n    fullName: \"Fiona Gallagher\",\n    email: \"fiona@example.com\",\n    groupId: \"g4\",\n    role: \"Admin\",\n    status: \"Active\",\n    balance: 950,\n    createdAt: \"2023-11-05\",\n  },\n].map(user => ({\n  ...user,\n  // Add groupName based on groupId for easier display\n  groupName: mockGroups.find(g => g.id === user.groupId)?.name || \"Unknown Group\",\n}));\n\n// Function to add a new user (simulates backend update)\nexport const addUser = (newUser: Omit<User, 'id' | 'groupName' | 'balance' | 'createdAt'>): User => {\n  console.log(\"Attempting to add user:\", newUser);\n  const id = `u${mockUsers.length + 1}`;\n  const groupName = mockGroups.find(g => g.id === newUser.groupId)?.name || \"Unknown Group\";\n  const userWithDetails: User = {\n    ...newUser,\n    id,\n    groupName,\n    balance: 0, // Default balance\n    createdAt: new Date().toISOString().split('T')[0], // Today's date\n  };\n  mockUsers.push(userWithDetails);\n  console.log(\"User added, updated mockUsers:\", mockUsers);\n  return userWithDetails;\n};\n\n// Function to update a user (simulates backend update)\nexport const updateUser = (updatedUser: User): boolean => {\n  const index = mockUsers.findIndex(u => u.id === updatedUser.id);\n  if (index !== -1) {\n    // Ensure groupName is updated if groupId changes\n    const groupName = mockGroups.find(g => g.id === updatedUser.groupId)?.name || \"Unknown Group\";\n    mockUsers[index] = { ...updatedUser, groupName };\n    console.log(\"User updated:\", mockUsers[index]);\n    return true;\n  }\n  console.log(\"User not found for update:\", updatedUser.id);\n  return false;\n};\n\n// Function to delete a user (simulates backend update)\nexport const deleteUser = (userId: string): boolean => {\n  const index = mockUsers.findIndex(u => u.id === userId);\n  if (index !== -1) {\n    mockUsers.splice(index, 1);\n    console.log(\"User deleted:\", userId);\n    return true;\n  }\n  console.log(\"User not found for deletion:\", userId);\n  return false;\n};\n","import React, { useState } from 'react';\nimport type { User, Group, UserRole, UserStatus } from '~/types/admin';\nimport { mockGroups } from '~/lib/mockData'; // Import mock groups for dropdown\n\ninterface AddUserModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAddUser: (newUser: Omit<User, 'id' | 'groupName' | 'balance' | 'createdAt'>) => void; // Adjusted type\n}\n\nexport function AddUserModal({ isOpen, onClose, onAddUser }: AddUserModalProps) {\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [groupId, setGroupId] = useState<string>(mockGroups[0]?.id || ''); // Default to first group\n  const [role, setRole] = useState<UserRole>('User');\n  const [status, setStatus] = useState<UserStatus>('Active');\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n\n  const validateForm = (): boolean => {\n    const newErrors: { [key: string]: string } = {};\n    if (!fullName.trim()) newErrors.fullName = 'Full Name is required.';\n    if (!email.trim()) {\n      newErrors.email = 'Email is required.';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n      newErrors.email = 'Email is invalid.';\n    }\n    // Add check for email uniqueness if needed (requires access to all users)\n    if (!groupId) newErrors.group = 'Group is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (validateForm()) {\n      onAddUser({\n        fullName,\n        email,\n        groupId,\n        role,\n        status,\n      });\n      // Reset form and close modal after successful submission\n      setFullName('');\n      setEmail('');\n      setGroupId(mockGroups[0]?.id || '');\n      setRole('User');\n      setStatus('Active');\n      setErrors({});\n      onClose(); // Close the modal\n    }\n  };\n\n  const handleClose = () => {\n    // Reset form state when closing without submitting\n    setFullName('');\n    setEmail('');\n    setGroupId(mockGroups[0]?.id || '');\n    setRole('User');\n    setStatus('Active');\n    setErrors({});\n    onClose();\n  }\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Add New User</h2>\n        <form onSubmit={handleSubmit} noValidate>\n          {/* Full Name */}\n          <div className=\"mb-4\">\n            <label htmlFor=\"fullName\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Full Name <span className=\"text-red-500\">*</span></label>\n            <input\n              type=\"text\"\n              id=\"fullName\"\n              value={fullName}\n              onChange={(e) => setFullName(e.target.value)}\n              className={`w-full px-3 py-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white ${errors.fullName ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'}`}\n              required\n            />\n            {errors.fullName && <p className=\"text-red-500 text-xs mt-1\">{errors.fullName}</p>}\n          </div>\n\n          {/* Email */}\n          <div className=\"mb-4\">\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Email <span className=\"text-red-500\">*</span></label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className={`w-full px-3 py-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white ${errors.email ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'}`}\n              required\n            />\n             {errors.email && <p className=\"text-red-500 text-xs mt-1\">{errors.email}</p>}\n          </div>\n\n          {/* Group */}\n          <div className=\"mb-4\">\n            <label htmlFor=\"group\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Group <span className=\"text-red-500\">*</span></label>\n            <select\n              id=\"group\"\n              value={groupId}\n              onChange={(e) => setGroupId(e.target.value)}\n              className={`w-full px-3 py-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white ${errors.group ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'}`}\n              required\n            >\n              {mockGroups.map(group => (\n                <option key={group.id} value={group.id}>{group.name}</option>\n              ))}\n            </select>\n             {errors.group && <p className=\"text-red-500 text-xs mt-1\">{errors.group}</p>}\n          </div>\n\n          {/* Role */}\n          <div className=\"mb-4\">\n            <label htmlFor=\"role\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Role</label>\n            <select\n              id=\"role\"\n              value={role}\n              onChange={(e) => setRole(e.target.value as UserRole)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            >\n              <option value=\"User\">User</option>\n              <option value=\"Admin\">Admin</option>\n              <option value=\"Super Admin\">Super Admin</option>\n            </select>\n          </div>\n\n          {/* Status */}\n          <div className=\"mb-6\">\n            <label htmlFor=\"status\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Status</label>\n            <select\n              id=\"status\"\n              value={status}\n              onChange={(e) => setStatus(e.target.value as UserStatus)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            >\n              <option value=\"Active\">Active</option>\n              <option value=\"Suspended\">Suspended</option>\n            </select>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3\">\n            <button\n              type=\"button\"\n              onClick={handleClose}\n              className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n            >\n              Add User\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useCallback } from 'react';\nimport * as XLSX from 'xlsx';\nimport type { User, Group, UserRole, UserStatus, BulkUploadResult } from '~/types/admin';\nimport { mockGroups } from '~/lib/mockData'; // To validate group names/IDs\n\ninterface BulkUploadModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onBulkUpload: (users: Omit<User, 'id' | 'groupName' | 'balance' | 'createdAt'>[]) => BulkUploadResult; // Simulates backend processing\n}\n\n// --- Icons ---\nfunction DownloadIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/><polyline points=\"7 10 12 15 17 10\"/><line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\"/></svg>\n  );\n}\nfunction UploadIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/><polyline points=\"17 8 12 3 7 8\"/><line x1=\"12\" x2=\"12\" y1=\"3\" y2=\"15\"/></svg>\n  );\n}\nfunction AlertCircleIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><line x1=\"12\" x2=\"12\" y1=\"8\" y2=\"12\"/><line x1=\"12\" x2=\"12.01\" y1=\"16\" y2=\"16\"/></svg>\n  );\n}\nfunction CheckCircleIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"/><path d=\"m9 11 3 3L22 4\"/></svg>\n  );\n}\n\n\n// Expected columns in the template/upload\nconst expectedColumns = [\"FullName\", \"Email\", \"GroupName\", \"Role\", \"Status\"];\nconst validRoles: UserRole[] = [\"Super Admin\", \"Admin\", \"User\"];\nconst validStatuses: UserStatus[] = [\"Active\", \"Suspended\"];\n\nexport function BulkUploadModal({ isOpen, onClose, onBulkUpload }: BulkUploadModalProps) {\n  const [file, setFile] = useState<File | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [uploadResult, setUploadResult] = useState<BulkUploadResult | null>(null);\n  const [fileName, setFileName] = useState<string>('');\n  const [processingError, setProcessingError] = useState<string | null>(null);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const selectedFile = event.target.files[0];\n      if (selectedFile.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || selectedFile.name.endsWith('.xlsx')) {\n        setFile(selectedFile);\n        setFileName(selectedFile.name);\n        setUploadResult(null); // Reset previous results\n        setProcessingError(null);\n      } else {\n        alert('Please upload a valid .xlsx file.');\n        event.target.value = ''; // Clear the input\n      }\n    }\n  };\n\n  const downloadTemplate = () => {\n    const ws = XLSX.utils.aoa_to_sheet([expectedColumns]);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Users Template\");\n    XLSX.writeFile(wb, \"LifeEconomy_User_Template.xlsx\");\n  };\n\n  const processUpload = useCallback(async () => {\n    if (!file) return;\n\n    setIsProcessing(true);\n    setUploadResult(null);\n    setProcessingError(null);\n\n    try {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const data = e.target?.result;\n          if (!data) throw new Error(\"Failed to read file data.\");\n\n          const workbook = XLSX.read(data, { type: 'array' });\n          const sheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[sheetName];\n          const jsonData = XLSX.utils.sheet_to_json<any>(worksheet, { header: 1 }); // Read as array of arrays\n\n          if (!jsonData || jsonData.length < 2) { // Header + at least one data row\n             throw new Error(\"File is empty or contains only headers.\");\n          }\n\n          const headers = jsonData[0] as string[];\n          const missingHeaders = expectedColumns.filter(h => !headers.includes(h));\n          if (missingHeaders.length > 0) {\n            throw new Error(`Missing required columns: ${missingHeaders.join(', ')}`);\n          }\n\n          const usersToUpload: Omit<User, 'id' | 'groupName' | 'balance' | 'createdAt'>[] = [];\n          const errors: { row: number; message: string }[] = [];\n          const groupMap = new Map(mockGroups.map(g => [g.name.toLowerCase(), g.id])); // For quick lookup\n\n          for (let i = 1; i < jsonData.length; i++) {\n            const row = jsonData[i] as any[];\n            const rowData: { [key: string]: any } = {};\n            headers.forEach((header, index) => {\n              rowData[header] = row[index];\n            });\n\n            const rowNum = i + 1; // User-friendly row number (1-based index including header)\n            const fullName = rowData.FullName?.trim();\n            const email = rowData.Email?.trim();\n            const groupName = rowData.GroupName?.trim();\n            const role = rowData.Role?.trim() as UserRole;\n            const status = rowData.Status?.trim() as UserStatus;\n\n            // --- Validation ---\n            let rowHasError = false;\n            if (!fullName) { errors.push({ row: rowNum, message: \"FullName is required.\" }); rowHasError = true; }\n            if (!email) { errors.push({ row: rowNum, message: \"Email is required.\" }); rowHasError = true; }\n            else if (!/\\S+@\\S+\\.\\S+/.test(email)) { errors.push({ row: rowNum, message: \"Email format is invalid.\" }); rowHasError = true; }\n            // Add email uniqueness check against existing users if needed here\n            if (!groupName) { errors.push({ row: rowNum, message: \"GroupName is required.\" }); rowHasError = true; }\n            const groupId = groupMap.get(groupName?.toLowerCase());\n            if (groupName && !groupId) { errors.push({ row: rowNum, message: `Group '${groupName}' not found.` }); rowHasError = true; }\n            if (!role) { errors.push({ row: rowNum, message: \"Role is required.\" }); rowHasError = true; }\n            else if (!validRoles.includes(role)) { errors.push({ row: rowNum, message: `Invalid Role '${role}'. Valid roles: ${validRoles.join(', ')}` }); rowHasError = true; }\n            if (!status) { errors.push({ row: rowNum, message: \"Status is required.\" }); rowHasError = true; }\n            else if (!validStatuses.includes(status)) { errors.push({ row: rowNum, message: `Invalid Status '${status}'. Valid statuses: ${validStatuses.join(', ')}` }); rowHasError = true; }\n            // --- End Validation ---\n\n            if (!rowHasError && groupId) {\n              usersToUpload.push({ fullName, email, groupId, role, status });\n            }\n          }\n\n          if (errors.length > 0) {\n             // Only show validation errors, don't proceed with upload yet\n             setUploadResult({ successCount: 0, errors });\n          } else if (usersToUpload.length > 0) {\n            // Simulate backend processing\n            const result = onBulkUpload(usersToUpload);\n            setUploadResult(result);\n          } else {\n             // No valid users found, but no specific errors (e.g., empty data rows)\n             setProcessingError(\"No valid user data found in the file to upload.\");\n          }\n\n        } catch (err: any) {\n          console.error(\"Error processing XLSX file:\", err);\n          setProcessingError(`Error processing file: ${err.message || 'Unknown error'}`);\n          setUploadResult(null); // Clear any partial results\n        } finally {\n          setIsProcessing(false);\n        }\n      };\n      reader.onerror = (err) => {\n        console.error(\"FileReader error:\", err);\n        setProcessingError(\"Error reading the file.\");\n        setIsProcessing(false);\n      };\n      reader.readAsArrayBuffer(file);\n\n    } catch (error: any) {\n      console.error(\"Upload error:\", error);\n      setProcessingError(`An unexpected error occurred: ${error.message}`);\n      setIsProcessing(false);\n    }\n  }, [file, onBulkUpload]);\n\n\n  const handleClose = () => {\n    setFile(null);\n    setFileName('');\n    setIsProcessing(false);\n    setUploadResult(null);\n    setProcessingError(null);\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-lg\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Bulk Upload Users</h2>\n\n        {/* Download Template */}\n        <div className=\"mb-4\">\n          <button\n            onClick={downloadTemplate}\n            className=\"inline-flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm\"\n          >\n            <DownloadIcon className=\"h-4 w-4\" />\n            Download .xlsx Template\n          </button>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n            Download the template, fill in user details, and upload the file below. Required columns: {expectedColumns.join(', ')}.\n          </p>\n        </div>\n\n        {/* Upload Area */}\n        <div className=\"mb-4\">\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Upload .xlsx File</label>\n          <div className=\"flex items-center border border-gray-300 dark:border-gray-600 rounded-md\">\n             <label htmlFor=\"file-upload\" className=\"flex-grow px-3 py-2 text-sm text-gray-500 dark:text-gray-400 cursor-pointer truncate\">\n               {fileName || \"Choose file...\"}\n             </label>\n             <input\n                id=\"file-upload\"\n                type=\"file\"\n                accept=\".xlsx, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n                onChange={handleFileChange}\n                className=\"hidden\" // Hide default input, use label for styling\n              />\n             <button\n                onClick={() => document.getElementById('file-upload')?.click()}\n                className=\"px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600 text-sm\"\n                disabled={isProcessing}\n              >\n                Browse\n              </button>\n          </div>\n\n        </div>\n\n         {/* Processing Indicator */}\n        {isProcessing && (\n          <div className=\"text-center my-4 text-blue-600 dark:text-blue-400\">\n            Processing... Please wait.\n          </div>\n        )}\n\n        {/* Error Display */}\n        {processingError && (\n          <div className=\"my-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-md text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircleIcon className=\"h-5 w-5 flex-shrink-0\"/>\n              <span>{processingError}</span>\n            </div>\n          </div>\n        )}\n\n\n        {/* Upload Results */}\n        {uploadResult && (\n          <div className=\"mt-4 space-y-3\">\n            <h3 className=\"text-md font-semibold text-gray-800 dark:text-gray-200\">Upload Summary</h3>\n            {uploadResult.successCount > 0 && (\n               <div className=\"p-3 bg-green-100 border border-green-400 text-green-700 rounded-md text-sm\">\n                 <div className=\"flex items-center gap-2\">\n                    <CheckCircleIcon className=\"h-5 w-5 flex-shrink-0\"/>\n                    <span>Successfully processed {uploadResult.successCount} users.</span>\n                 </div>\n               </div>\n            )}\n             {uploadResult.errors.length > 0 && (\n               <div className=\"p-3 bg-red-100 border border-red-400 text-red-700 rounded-md text-sm\">\n                 <div className=\"flex items-center gap-2 mb-2\">\n                    <AlertCircleIcon className=\"h-5 w-5 flex-shrink-0\"/>\n                    <span className=\"font-medium\">Found {uploadResult.errors.length} errors:</span>\n                 </div>\n                 <ul className=\"list-disc list-inside max-h-40 overflow-y-auto text-xs space-y-1\">\n                    {uploadResult.errors.map((err, index) => (\n                      <li key={index}>Row {err.row}: {err.message}</li>\n                    ))}\n                 </ul>\n               </div>\n            )}\n             {(uploadResult.successCount === 0 && uploadResult.errors.length === 0 && !processingError) && (\n                 <div className=\"p-3 bg-yellow-100 border border-yellow-400 text-yellow-700 rounded-md text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                        <AlertCircleIcon className=\"h-5 w-5 flex-shrink-0\"/>\n                        <span>No users were processed. Check the file for valid data or errors.</span>\n                    </div>\n                 </div>\n             )}\n          </div>\n        )}\n\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end gap-3 mt-6\">\n          <button\n            type=\"button\"\n            onClick={handleClose}\n            className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\"\n            disabled={isProcessing}\n          >\n            {uploadResult ? 'Close' : 'Cancel'}\n          </button>\n          <button\n            type=\"button\"\n            onClick={processUpload}\n            className=\"inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n            disabled={!file || isProcessing || !!uploadResult} // Disable if no file, processing, or results shown\n          >\n             <UploadIcon className=\"h-4 w-4\" />\n            {isProcessing ? 'Processing...' : 'Upload & Validate'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\ninterface ConfirmationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  title: string;\n  message: string | React.ReactNode;\n  confirmText?: string;\n  cancelText?: string;\n  confirmButtonClass?: string; // Optional class for confirm button styling (e.g., danger)\n}\n\nexport function ConfirmationModal({\n  isOpen,\n  onClose,\n  onConfirm,\n  title,\n  message,\n  confirmText = \"Confirm\",\n  cancelText = \"Cancel\",\n  confirmButtonClass = \"bg-red-600 hover:bg-red-700\", // Default to danger style\n}: ConfirmationModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">{title}</h2>\n        <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-6\">\n          {message}\n        </div>\n        <div className=\"flex justify-end gap-3\">\n          <button\n            type=\"button\"\n            onClick={onClose}\n            className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\"\n          >\n            {cancelText}\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              onConfirm();\n              onClose(); // Close modal after confirmation\n            }}\n            className={`px-4 py-2 text-white rounded-md ${confirmButtonClass}`}\n          >\n            {confirmText}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// Placeholder for the detailed user view component\n// This could be a modal, a drawer, or navigate to a new route like /admin/users/:userId\n\nimport React from 'react';\nimport type { User } from '~/types/admin';\n\ninterface UserProfileViewProps {\n  user: User | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function UserProfileView({ user, isOpen, onClose }: UserProfileViewProps) {\n  if (!isOpen || !user) return null;\n\n  // Basic Modal Structure - Replace with more detailed layout later\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">User Profile: {user.fullName}</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n          >\n            &times; {/* Close icon */}\n          </button>\n        </div>\n\n        {/* --- Placeholder Sections --- */}\n        <div className=\"space-y-6\">\n          {/* 1. Personal Info */}\n          <section className=\"p-4 border rounded dark:border-gray-700\">\n            <h3 className=\"text-lg font-semibold mb-2\">Personal Info</h3>\n            <p><strong>Email:</strong> {user.email}</p>\n            <p><strong>Group:</strong> {user.groupName}</p>\n            <p><strong>Role:</strong> {user.role}</p>\n            <p><strong>Status:</strong> {user.status}</p>\n          </section>\n\n          {/* 2. ESSENCE Balance */}\n          <section className=\"p-4 border rounded dark:border-gray-700\">\n            <h3 className=\"text-lg font-semibold mb-2\">ESSENCE Balance</h3>\n            <p className=\"text-2xl font-bold\">{user.balance ?? 0} <span className=\"text-sm font-normal\">ESSENCE</span></p>\n          </section>\n\n          {/* 3. Transaction History */}\n          <section className=\"p-4 border rounded dark:border-gray-700\">\n            <h3 className=\"text-lg font-semibold mb-2\">Transaction History</h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">(Placeholder: Table with Date, Type, Amount, Description, Search, Date Filter)</p>\n          </section>\n\n          {/* 4. Activity Log */}\n          <section className=\"p-4 border rounded dark:border-gray-700\">\n            <h3 className=\"text-lg font-semibold mb-2\">Activity Log</h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">(Placeholder: Table of user actions - login, updates, etc.)</p>\n          </section>\n\n          {/* 5. Rewards Summary */}\n           <section className=\"p-4 border rounded dark:border-gray-700\">\n            <h3 className=\"text-lg font-semibold mb-2\">Rewards Summary</h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">(Placeholder: Total rewards, list with reasons/dates)</p>\n          </section>\n\n          {/* 6. Expenses List */}\n           <section className=\"p-4 border rounded dark:border-gray-700\">\n            <h3 className=\"text-lg font-semibold mb-2\">Expenses List</h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">(Placeholder: Assigned expenses, amounts, frequency)</p>\n          </section>\n\n          {/* 7. Fines Record */}\n           <section className=\"p-4 border rounded dark:border-gray-700\">\n            <h3 className=\"text-lg font-semibold mb-2\">Fines Record</h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">(Placeholder: Fine history, issuer, amount, reasons)</p>\n          </section>\n\n           {/* 8. Activity List */}\n           <section className=\"p-4 border rounded dark:border-gray-700\">\n            <h3 className=\"text-lg font-semibold mb-2\">Assigned Activities</h3>\n            <p className=\"text-gray-500 dark:text-gray-400\">(Placeholder: List of assigned activities, pay amount, frequency)</p>\n          </section>\n\n        </div>\n\n        <div className=\"mt-6 flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","// Placeholder for Edit User Modal\nimport React, { useState, useEffect } from 'react';\nimport type { User, Group, UserRole, UserStatus } from '~/types/admin';\nimport { mockGroups } from '~/lib/mockData';\n\ninterface EditUserModalProps {\n  user: User | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onUpdateUser: (updatedUser: User) => void;\n}\n\nexport function EditUserModal({ user, isOpen, onClose, onUpdateUser }: EditUserModalProps) {\n const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [groupId, setGroupId] = useState<string>('');\n  const [role, setRole] = useState<UserRole>('User');\n  const [status, setStatus] = useState<UserStatus>('Active');\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n\n  useEffect(() => {\n    // Pre-fill form when user data is available and modal opens\n    if (user && isOpen) {\n      setFullName(user.fullName);\n      setEmail(user.email);\n      setGroupId(user.groupId);\n      setRole(user.role);\n      setStatus(user.status);\n      setErrors({}); // Clear previous errors\n    }\n     // Reset form when modal closes or user is null\n    if (!isOpen) {\n        setFullName('');\n        setEmail('');\n        setGroupId('');\n        setRole('User');\n        setStatus('Active');\n        setErrors({});\n    }\n  }, [user, isOpen]);\n\n  const validateForm = (): boolean => {\n    const newErrors: { [key: string]: string } = {};\n    if (!fullName.trim()) newErrors.fullName = 'Full Name is required.';\n    if (!email.trim()) {\n      newErrors.email = 'Email is required.';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n      newErrors.email = 'Email is invalid.';\n    }\n    // Add check for email uniqueness against OTHER users if needed\n    if (!groupId) newErrors.group = 'Group is required.';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (user && validateForm()) {\n      onUpdateUser({\n        ...user, // Keep existing id, balance, etc.\n        fullName,\n        email,\n        groupId,\n        role,\n        status,\n      });\n      onClose(); // Close the modal\n    }\n  };\n\n\n  if (!isOpen || !user) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Edit User: {user.fullName}</h2>\n         <form onSubmit={handleSubmit} noValidate>\n          {/* Full Name */}\n          <div className=\"mb-4\">\n            <label htmlFor=\"editFullName\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Full Name <span className=\"text-red-500\">*</span></label>\n            <input\n              type=\"text\"\n              id=\"editFullName\"\n              value={fullName}\n              onChange={(e) => setFullName(e.target.value)}\n              className={`w-full px-3 py-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white ${errors.fullName ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'}`}\n              required\n            />\n            {errors.fullName && <p className=\"text-red-500 text-xs mt-1\">{errors.fullName}</p>}\n          </div>\n\n          {/* Email */}\n          <div className=\"mb-4\">\n            <label htmlFor=\"editEmail\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Email <span className=\"text-red-500\">*</span></label>\n            <input\n              type=\"email\"\n              id=\"editEmail\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className={`w-full px-3 py-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white ${errors.email ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'}`}\n              required\n            />\n             {errors.email && <p className=\"text-red-500 text-xs mt-1\">{errors.email}</p>}\n          </div>\n\n          {/* Group */}\n          <div className=\"mb-4\">\n            <label htmlFor=\"editGroup\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Group <span className=\"text-red-500\">*</span></label>\n            <select\n              id=\"editGroup\"\n              value={groupId}\n              onChange={(e) => setGroupId(e.target.value)}\n              className={`w-full px-3 py-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white ${errors.group ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'}`}\n              required\n            >\n              {mockGroups.map(group => (\n                <option key={group.id} value={group.id}>{group.name}</option>\n              ))}\n            </select>\n             {errors.group && <p className=\"text-red-500 text-xs mt-1\">{errors.group}</p>}\n          </div>\n\n          {/* Role */}\n          <div className=\"mb-4\">\n            <label htmlFor=\"editRole\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Role</label>\n            <select\n              id=\"editRole\"\n              value={role}\n              onChange={(e) => setRole(e.target.value as UserRole)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            >\n              <option value=\"User\">User</option>\n              <option value=\"Admin\">Admin</option>\n              <option value=\"Super Admin\">Super Admin</option>\n            </select>\n          </div>\n\n          {/* Status */}\n          <div className=\"mb-6\">\n            <label htmlFor=\"editStatus\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Status</label>\n            <select\n              id=\"editStatus\"\n              value={status}\n              onChange={(e) => setStatus(e.target.value as UserStatus)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            >\n              <option value=\"Active\">Active</option>\n              <option value=\"Suspended\">Suspended</option>\n            </select>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n            >\n              Update User\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","// Placeholder for Change Password Modal\nimport React, { useState } from 'react';\nimport type { User } from '~/types/admin';\n\ninterface ChangePasswordModalProps {\n  user: User | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onChangePassword: (userId: string, newPassword: string) => void; // Simulate password change\n}\n\nexport function ChangePasswordModal({ user, isOpen, onClose, onChangePassword }: ChangePasswordModalProps) {\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState<string | null>(null);\n\n   const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null); // Clear previous errors\n\n    if (!newPassword || !confirmPassword) {\n      setError(\"Both password fields are required.\");\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      setError(\"Passwords do not match.\");\n      return;\n    }\n    if (newPassword.length < 8) { // Example minimum length\n        setError(\"Password must be at least 8 characters long.\");\n        return;\n    }\n\n    if (user) {\n      onChangePassword(user.id, newPassword); // Simulate the change\n      console.log(`Password change requested for user ${user.id}`);\n      // Reset form and close\n      setNewPassword('');\n      setConfirmPassword('');\n      onClose();\n    }\n  };\n\n  const handleClose = () => {\n    setNewPassword('');\n    setConfirmPassword('');\n    setError(null);\n    onClose();\n  }\n\n  if (!isOpen || !user) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Change Password for {user.fullName}</h2>\n        <form onSubmit={handleSubmit} noValidate>\n           {/* New Password */}\n          <div className=\"mb-4\">\n            <label htmlFor=\"newPassword\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">New Password</label>\n            <input\n              type=\"password\"\n              id=\"newPassword\"\n              value={newPassword}\n              onChange={(e) => setNewPassword(e.target.value)}\n              className={`w-full px-3 py-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white ${error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'}`}\n              required\n            />\n          </div>\n           {/* Confirm New Password */}\n          <div className=\"mb-4\">\n            <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Confirm New Password</label>\n            <input\n              type=\"password\"\n              id=\"confirmPassword\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              className={`w-full px-3 py-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white ${error ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'}`}\n              required\n            />\n          </div>\n\n           {/* Error Display */}\n           {error && <p className=\"text-red-500 text-xs mb-4\">{error}</p>}\n\n           {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3\">\n            <button\n              type=\"button\"\n              onClick={handleClose}\n              className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n            >\n              Set New Password\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { UsersTable } from './UsersTable';\nimport { AddUserModal } from './AddUserModal';\nimport { BulkUploadModal } from './BulkUploadModal';\nimport { ConfirmationModal } from './ConfirmationModal';\nimport { UserProfileView } from './UserProfileView';\nimport { EditUserModal } from './EditUserModal';\nimport { ChangePasswordModal } from './ChangePasswordModal';\nimport { mockUsers, mockGroups, addUser, updateUser, deleteUser } from '~/lib/mockData';\nimport type { User, Group, UserRole, UserStatus, BulkUploadResult } from '~/types/admin';\n\n// --- Icons ---\nfunction PlusIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><line x1=\"12\" x2=\"12\" y1=\"5\" y2=\"19\"/><line x1=\"5\" x2=\"19\" y1=\"12\" y2=\"12\"/></svg>\n  );\n}\nfunction UploadIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/><polyline points=\"17 8 12 3 7 8\"/><line x1=\"12\" x2=\"12\" y1=\"3\" y2=\"15\"/></svg>\n  );\n}\nfunction SearchIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><circle cx=\"11\" cy=\"11\" r=\"8\"/><path d=\"m21 21-4.3-4.3\"/></svg>\n  );\n}\n\n\nexport function UsersTabContent() {\n  const [users, setUsers] = useState<User[]>(mockUsers); // Manage users in state\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterGroup, setFilterGroup] = useState<string>(''); // Group ID\n  const [filterRole, setFilterRole] = useState<UserRole | ''>('');\n  const [filterStatus, setFilterStatus] = useState<UserStatus | ''>('');\n\n  // Modal States\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isBulkModalOpen, setIsBulkModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isSuspendModalOpen, setIsSuspendModalOpen] = useState(false);\n  const [isRestoreModalOpen, setIsRestoreModalOpen] = useState(false);\n  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);\n  const [isProfileViewOpen, setIsProfileViewOpen] = useState(false);\n\n  // State for selected user for actions\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  // Memoized filtered users\n  const filteredUsers = useMemo(() => {\n    return users.filter(user => {\n      const searchMatch = searchTerm === '' ||\n        user.fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        user.email.toLowerCase().includes(searchTerm.toLowerCase());\n      const groupMatch = filterGroup === '' || user.groupId === filterGroup;\n      const roleMatch = filterRole === '' || user.role === filterRole;\n      const statusMatch = filterStatus === '' || user.status === filterStatus;\n      return searchMatch && groupMatch && roleMatch && statusMatch;\n    });\n  }, [users, searchTerm, filterGroup, filterRole, filterStatus]);\n\n  // --- Action Handlers ---\n  const handleAddUser = useCallback((newUser: Omit<User, 'id' | 'groupName' | 'balance' | 'createdAt'>) => {\n    const addedUser = addUser(newUser); // Use mockData function\n    setUsers(prevUsers => [...prevUsers, addedUser]); // Update state\n    // TODO: Show success notification \"User '[Name]' added successfully.\"\n    console.log(`User '${addedUser.fullName}' added successfully.`);\n    setIsAddModalOpen(false);\n  }, []);\n\n  const handleBulkUpload = useCallback((newUsers: Omit<User, 'id' | 'groupName' | 'balance' | 'createdAt'>[]): BulkUploadResult => {\n    // Simulate backend processing and adding users\n    let successCount = 0;\n    const addedUsers: User[] = [];\n    const errors: { row: number; message: string }[] = []; // In a real scenario, backend would return errors\n\n    newUsers.forEach((newUser, index) => {\n      // Basic check for duplicates within the upload batch (more robust check needed against existing users)\n      if (users.some(u => u.email.toLowerCase() === newUser.email.toLowerCase()) || addedUsers.some(u => u.email.toLowerCase() === newUser.email.toLowerCase())) {\n         errors.push({ row: index + 2, message: `Email '${newUser.email}' already exists.` }); // +2 for header and 0-index\n      } else {\n        const addedUser = addUser(newUser); // Use mockData function to add one by one\n        addedUsers.push(addedUser);\n        successCount++;\n      }\n    });\n\n    if (addedUsers.length > 0) {\n      setUsers(prevUsers => [...prevUsers, ...addedUsers]); // Update state with successfully added users\n    }\n\n    console.log(`Bulk upload processed: ${successCount} successes, ${errors.length} errors.`);\n    // In a real app, you might not close the modal immediately, showing results first.\n    // setIsBulkModalOpen(false); // Keep modal open to show results\n    return { successCount, errors };\n  }, [users]); // Depend on current users for duplicate check\n\n  const handleEditUser = useCallback((userToEdit: User) => {\n    setSelectedUser(userToEdit);\n    setIsEditModalOpen(true);\n  }, []);\n\n   const handleUpdateUser = useCallback((updatedUserData: User) => {\n    const success = updateUser(updatedUserData); // Use mockData function\n    if (success) {\n      setUsers(prevUsers => prevUsers.map(u => u.id === updatedUserData.id ? updatedUserData : u));\n      // TODO: Show success notification\n      console.log(`User '${updatedUserData.fullName}' updated successfully.`);\n    } else {\n       // TODO: Show error notification\n       console.error(`Failed to update user '${updatedUserData.fullName}'.`);\n    }\n    setIsEditModalOpen(false);\n    setSelectedUser(null);\n  }, []);\n\n\n  const handleDeleteUser = useCallback((userToDelete: User) => {\n    setSelectedUser(userToDelete);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const confirmDeleteUser = useCallback(() => {\n    if (selectedUser) {\n      const success = deleteUser(selectedUser.id); // Use mockData function\n      if (success) {\n        setUsers(prevUsers => prevUsers.filter(u => u.id !== selectedUser.id));\n        // TODO: Show success notification\n        console.log(`User '${selectedUser.fullName}' deleted successfully.`);\n      } else {\n         // TODO: Show error notification\n         console.error(`Failed to delete user '${selectedUser.fullName}'.`);\n      }\n      setSelectedUser(null);\n    }\n    setIsDeleteModalOpen(false); // Close modal regardless of success/failure for now\n  }, [selectedUser]);\n\n  const handleSuspendUser = useCallback((userToSuspend: User) => {\n    setSelectedUser(userToSuspend);\n    setIsSuspendModalOpen(true);\n  }, []);\n\n  const confirmSuspendUser = useCallback(() => {\n    if (selectedUser) {\n       const updatedUser = { ...selectedUser, status: 'Suspended' as UserStatus };\n       const success = updateUser(updatedUser);\n       if (success) {\n         setUsers(prevUsers => prevUsers.map(u => u.id === updatedUser.id ? updatedUser : u));\n         // TODO: Show success notification\n         console.log(`User '${selectedUser.fullName}' suspended successfully.`);\n       } else {\n          // TODO: Show error notification\n          console.error(`Failed to suspend user '${selectedUser.fullName}'.`);\n       }\n       setSelectedUser(null);\n    }\n    setIsSuspendModalOpen(false);\n  }, [selectedUser]);\n\n  const handleRestoreUser = useCallback((userToRestore: User) => {\n    setSelectedUser(userToRestore);\n    setIsRestoreModalOpen(true);\n  }, []);\n\n  const confirmRestoreUser = useCallback(() => {\n     if (selectedUser) {\n       const updatedUser = { ...selectedUser, status: 'Active' as UserStatus };\n       const success = updateUser(updatedUser);\n       if (success) {\n         setUsers(prevUsers => prevUsers.map(u => u.id === updatedUser.id ? updatedUser : u));\n         // TODO: Show success notification\n         console.log(`User '${selectedUser.fullName}' restored successfully.`);\n       } else {\n          // TODO: Show error notification\n          console.error(`Failed to restore user '${selectedUser.fullName}'.`);\n       }\n       setSelectedUser(null);\n    }\n    setIsRestoreModalOpen(false);\n  }, [selectedUser]);\n\n  const handleChangePassword = useCallback((userToChangePass: User) => {\n    setSelectedUser(userToChangePass);\n    setIsPasswordModalOpen(true);\n  }, []);\n\n   const confirmChangePassword = useCallback((userId: string, newPassword: string) => {\n    // In a real app, this would call an API endpoint.\n    // Here, we just log it.\n    console.log(`Password change initiated for user ID: ${userId} with new password: ${newPassword}`);\n    // TODO: Show success notification\n    setIsPasswordModalOpen(false);\n    setSelectedUser(null);\n  }, []);\n\n  const handleViewProfile = useCallback((userToView: User) => {\n    setSelectedUser(userToView);\n    setIsProfileViewOpen(true);\n  }, []);\n\n\n  return (\n    <div className=\"p-4 border rounded-b-md dark:border-gray-700 bg-white dark:bg-gray-900\">\n      {/* Header Bar */}\n      <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-4 gap-3\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">User Management</h2>\n        <div className=\"flex gap-2 flex-wrap\">\n          <button\n            onClick={() => setIsAddModalOpen(true)}\n            className=\"inline-flex items-center gap-1 px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm\"\n          >\n            <PlusIcon className=\"h-4 w-4\" />\n            Add New User\n          </button>\n          <button\n            onClick={() => setIsBulkModalOpen(true)}\n            className=\"inline-flex items-center gap-1 px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm\"\n          >\n            <UploadIcon className=\"h-4 w-4\" />\n            Bulk Upload Users\n          </button>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-md border dark:border-gray-700\">\n        {/* Search */}\n        <div className=\"relative\">\n           <label htmlFor=\"search-users\" className=\"sr-only\">Search by name or email</label>\n           <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n             <SearchIcon className=\"h-5 w-5 text-gray-400\" />\n           </div>\n           <input\n            type=\"text\"\n            id=\"search-users\"\n            placeholder=\"Search by name or email...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        </div>\n        {/* Filter by Group */}\n        <div>\n          <label htmlFor=\"filter-group\" className=\"sr-only\">Filter by Group</label>\n          <select\n            id=\"filter-group\"\n            value={filterGroup}\n            onChange={(e) => setFilterGroup(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n          >\n            <option value=\"\">All Groups</option>\n            {mockGroups.map(group => (\n              <option key={group.id} value={group.id}>{group.name}</option>\n            ))}\n          </select>\n        </div>\n        {/* Filter by Role */}\n        <div>\n           <label htmlFor=\"filter-role\" className=\"sr-only\">Filter by Role</label>\n           <select\n            id=\"filter-role\"\n            value={filterRole}\n            onChange={(e) => setFilterRole(e.target.value as UserRole | '')}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n          >\n            <option value=\"\">All Roles</option>\n            <option value=\"Super Admin\">Super Admin</option>\n            <option value=\"Admin\">Admin</option>\n            <option value=\"User\">User</option>\n          </select>\n        </div>\n        {/* Filter by Status */}\n        <div>\n           <label htmlFor=\"filter-status\" className=\"sr-only\">Filter by Status</label>\n           <select\n            id=\"filter-status\"\n            value={filterStatus}\n            onChange={(e) => setFilterStatus(e.target.value as UserStatus | '')}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n          >\n            <option value=\"\">All Statuses</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Suspended\">Suspended</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Users Table */}\n      <UsersTable\n        users={filteredUsers}\n        onViewProfile={handleViewProfile}\n        onEdit={handleEditUser}\n        onDelete={handleDeleteUser}\n        onSuspend={handleSuspendUser}\n        onRestore={handleRestoreUser}\n        onChangePassword={handleChangePassword}\n      />\n\n      {/* Modals */}\n      <AddUserModal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n        onAddUser={handleAddUser}\n      />\n      <BulkUploadModal\n        isOpen={isBulkModalOpen}\n        onClose={() => setIsBulkModalOpen(false)}\n        onBulkUpload={handleBulkUpload}\n      />\n       <EditUserModal\n        isOpen={isEditModalOpen}\n        user={selectedUser}\n        onClose={() => { setIsEditModalOpen(false); setSelectedUser(null); }}\n        onUpdateUser={handleUpdateUser}\n      />\n       <ConfirmationModal\n        isOpen={isDeleteModalOpen}\n        onClose={() => { setIsDeleteModalOpen(false); setSelectedUser(null); }}\n        onConfirm={confirmDeleteUser}\n        title=\"Confirm Deletion\"\n        message={\n          <span>Are you sure you want to delete user <strong>{selectedUser?.fullName}</strong>? This action cannot be undone.</span>\n        }\n        confirmText=\"Delete\"\n        confirmButtonClass=\"bg-red-600 hover:bg-red-700\"\n      />\n       <ConfirmationModal\n        isOpen={isSuspendModalOpen}\n        onClose={() => { setIsSuspendModalOpen(false); setSelectedUser(null); }}\n        onConfirm={confirmSuspendUser}\n        title=\"Confirm Suspension\"\n        message={\n          <span>Are you sure you want to suspend user <strong>{selectedUser?.fullName}</strong>? They will lose access until restored.</span>\n        }\n        confirmText=\"Suspend\"\n        confirmButtonClass=\"bg-yellow-600 hover:bg-yellow-700\"\n      />\n       <ConfirmationModal\n        isOpen={isRestoreModalOpen}\n        onClose={() => { setIsRestoreModalOpen(false); setSelectedUser(null); }}\n        onConfirm={confirmRestoreUser}\n        title=\"Confirm Restoration\"\n        message={\n          <span>Are you sure you want to restore access for user <strong>{selectedUser?.fullName}</strong>?</span>\n        }\n        confirmText=\"Restore\"\n        confirmButtonClass=\"bg-green-600 hover:bg-green-700\"\n      />\n       <ChangePasswordModal\n        isOpen={isPasswordModalOpen}\n        user={selectedUser}\n        onClose={() => { setIsPasswordModalOpen(false); setSelectedUser(null); }}\n        onChangePassword={confirmChangePassword}\n      />\n       <UserProfileView\n        isOpen={isProfileViewOpen}\n        user={selectedUser}\n        onClose={() => { setIsProfileViewOpen(false); setSelectedUser(null); }}\n      />\n\n    </div>\n  );\n}\n","import React, { useState, useMemo } from 'react';\nimport { mockGroups, mockUsers } from '~/lib/mockData'; // Use existing mocks\nimport type { Group, User } from '~/types/admin';\nimport { ConfirmationModal } from './ConfirmationModal'; // Re-use confirmation\n\n// --- Icons ---\nfunction PlusIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><line x1=\"12\" x2=\"12\" y1=\"5\" y2=\"19\"/><line x1=\"5\" x2=\"19\" y1=\"12\" y2=\"12\"/></svg>\n  );\n}\nfunction EditIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n  );\n}\nfunction DeleteIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3 6h18\"/><path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"/><path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"/><line x1=\"10\" x2=\"10\" y1=\"11\" y2=\"17\"/><line x1=\"14\" x2=\"14\" y1=\"11\" y2=\"17\"/></svg>\n  );\n}\nfunction ViewIcon(props: React.SVGProps<SVGSVGElement>) { // Eye icon\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/></svg>\n  );\n}\nfunction SearchIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><circle cx=\"11\" cy=\"11\" r=\"8\"/><path d=\"m21 21-4.3-4.3\"/></svg>\n  );\n}\n\n// Placeholder Type - Extend Group if needed\ninterface ManagedGroup extends Group {\n  description?: string;\n  type?: string; // e.g., Squad, Academic Group, Team\n  userCount?: number; // Calculated\n}\n\n// Placeholder Modals (Implement fully later)\nfunction AddEditGroupModal({ isOpen, onClose, group, onSave }: { isOpen: boolean, onClose: () => void, group: ManagedGroup | null, onSave: (groupData: Omit<ManagedGroup, 'id' | 'userCount'>) => void }) {\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [type, setType] = useState('');\n  const [error, setError] = useState('');\n\n  React.useEffect(() => {\n    if (isOpen) {\n      setName(group?.name || '');\n      setDescription(group?.description || '');\n      setType(group?.type || '');\n      setError('');\n    }\n  }, [isOpen, group]);\n\n  const handleSave = () => {\n    if (!name.trim()) {\n      setError('Group Name is required.');\n      return;\n    }\n    // Add uniqueness check if needed\n    onSave({ name: name.trim(), description: description.trim(), type: type.trim() });\n    onClose();\n  };\n\n  if (!isOpen) return null;\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">{group ? 'Edit Group' : 'Add New Group'}</h2>\n        {error && <p className=\"text-red-500 text-sm mb-3\">{error}</p>}\n        <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"groupName\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Group Name <span className=\"text-red-500\">*</span></label>\n            <input type=\"text\" id=\"groupName\" value={name} onChange={(e) => setName(e.target.value)} className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white\" />\n          </div>\n          <div>\n            <label htmlFor=\"groupDesc\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Description</label>\n            <textarea id=\"groupDesc\" value={description} onChange={(e) => setDescription(e.target.value)} rows={3} className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white\" />\n          </div>\n          <div>\n            <label htmlFor=\"groupType\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Group Type</label>\n            <input type=\"text\" id=\"groupType\" value={type} onChange={(e) => setType(e.target.value)} placeholder=\"e.g., Squad, Team\" className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white\" />\n          </div>\n        </div>\n        <div className=\"flex justify-end gap-3 mt-6\">\n          <button onClick={onClose} className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\">Cancel</button>\n          <button onClick={handleSave} className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\">{group ? 'Update Group' : 'Add Group'}</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ViewMembersModal({ isOpen, onClose, group, users }: { isOpen: boolean, onClose: () => void, group: ManagedGroup | null, users: User[] }) {\n  if (!isOpen || !group) return null;\n  const members = users.filter(u => u.groupId === group.id);\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-lg max-h-[80vh] flex flex-col\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Members of {group.name} ({members.length})</h2>\n        <div className=\"flex-grow overflow-y-auto mb-4 border dark:border-gray-700 rounded\">\n          {members.length === 0 ? (\n            <p className=\"p-4 text-gray-500 dark:text-gray-400\">No users found in this group.</p>\n          ) : (\n            <ul className=\"divide-y dark:divide-gray-700\">\n              {members.map(user => (\n                <li key={user.id} className=\"px-4 py-2 text-sm text-gray-700 dark:text-gray-300\">\n                  {user.fullName} ({user.email}) - {user.role}\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n        <div className=\"flex justify-end\">\n          <button onClick={onClose} className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\">Close</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport function GroupsManagement() {\n  // Simulate fetching groups and users - replace with actual data fetching\n  const [allUsers] = useState<User[]>(mockUsers);\n  const [groups, setGroups] = useState<ManagedGroup[]>(() =>\n    mockGroups.map(g => ({\n      ...g,\n      description: `Description for ${g.name}`, // Placeholder\n      type: ['Squad', 'Team', 'Academic Group', 'Other'][Math.floor(Math.random() * 4)], // Placeholder\n      userCount: allUsers.filter(u => u.groupId === g.id).length,\n    }))\n  );\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('');\n  const [isAddEditModalOpen, setIsAddEditModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isViewMembersModalOpen, setIsViewMembersModalOpen] = useState(false);\n  const [selectedGroup, setSelectedGroup] = useState<ManagedGroup | null>(null);\n\n  const groupTypes = useMemo(() => [...new Set(groups.map(g => g.type).filter(Boolean))], [groups]) as string[];\n\n  const filteredGroups = useMemo(() => {\n    return groups.filter(group => {\n      const searchMatch = searchTerm === '' || group.name.toLowerCase().includes(searchTerm.toLowerCase());\n      const typeMatch = filterType === '' || group.type === filterType;\n      return searchMatch && typeMatch;\n    });\n  }, [groups, searchTerm, filterType]);\n\n  // --- Placeholder Action Handlers ---\n  const handleAddGroup = () => {\n    setSelectedGroup(null);\n    setIsAddEditModalOpen(true);\n  };\n\n  const handleEditGroup = (group: ManagedGroup) => {\n    setSelectedGroup(group);\n    setIsAddEditModalOpen(true);\n  };\n\n  const handleSaveGroup = (groupData: Omit<ManagedGroup, 'id' | 'userCount'>) => {\n    if (selectedGroup) {\n      // Edit existing\n      setGroups(prev => prev.map(g => g.id === selectedGroup.id ? { ...selectedGroup, ...groupData } : g));\n      console.log(\"Updated group:\", { ...selectedGroup, ...groupData });\n      // TODO: Show success toast\n    } else {\n      // Add new\n      const newGroup: ManagedGroup = {\n        ...groupData,\n        id: `g${Date.now()}`, // Simple unique ID generation\n        userCount: 0,\n      };\n      setGroups(prev => [...prev, newGroup]);\n      console.log(\"Added group:\", newGroup);\n      // TODO: Show success toast\n    }\n  };\n\n  const handleDeleteGroup = (group: ManagedGroup) => {\n    setSelectedGroup(group);\n    setIsDeleteModalOpen(true);\n  };\n\n  const confirmDeleteGroup = () => {\n    if (selectedGroup) {\n      // Add check: Cannot delete group if it has members? Or reassign members?\n      if (selectedGroup.userCount && selectedGroup.userCount > 0) {\n         alert(`Cannot delete group \"${selectedGroup.name}\" because it has ${selectedGroup.userCount} member(s). Please reassign users first.`);\n         setIsDeleteModalOpen(false);\n         setSelectedGroup(null);\n         return;\n      }\n      setGroups(prev => prev.filter(g => g.id !== selectedGroup.id));\n      console.log(\"Deleted group:\", selectedGroup.id);\n      // TODO: Show success toast\n      setIsDeleteModalOpen(false);\n      setSelectedGroup(null);\n    }\n  };\n\n  const handleViewMembers = (group: ManagedGroup) => {\n    setSelectedGroup(group);\n    setIsViewMembersModalOpen(true);\n  };\n\n  return (\n    <div className=\"p-4 border rounded-md dark:border-gray-700 bg-white dark:bg-gray-900 shadow-sm\">\n      <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">Groups Management</h3>\n\n      {/* Controls */}\n      <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-4 gap-3\">\n        <button\n          onClick={handleAddGroup}\n          className=\"inline-flex items-center gap-1 px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm\"\n        >\n          <PlusIcon className=\"h-4 w-4\" />\n          Add New Group\n        </button>\n        <div className=\"flex gap-2 flex-wrap\">\n          {/* Search */}\n          <div className=\"relative\">\n            <label htmlFor=\"search-groups\" className=\"sr-only\">Search by group name</label>\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <SearchIcon className=\"h-5 w-5 text-gray-400\" />\n            </div>\n            <input\n              type=\"text\"\n              id=\"search-groups\"\n              placeholder=\"Search groups...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full md:w-auto pl-10 pr-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n            />\n          </div>\n          {/* Filter by Type */}\n          <div>\n            <label htmlFor=\"filter-group-type\" className=\"sr-only\">Filter by Group Type</label>\n            <select\n              id=\"filter-group-type\"\n              value={filterType}\n              onChange={(e) => setFilterType(e.target.value)}\n              className=\"w-full md:w-auto px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n            >\n              <option value=\"\">All Types</option>\n              {groupTypes.map(type => (\n                <option key={type} value={type}>{type}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Groups Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-800\">\n            <tr>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Group Name</th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Type</th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">User Count</th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Actions</th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200 dark:bg-gray-900 dark:divide-gray-700\">\n            {filteredGroups.length === 0 ? (\n              <tr>\n                <td colSpan={4} className=\"px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400\">\n                  No groups found matching your criteria.\n                </td>\n              </tr>\n            ) : (\n              filteredGroups.map((group) => (\n                <tr key={group.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">{group.name}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{group.type || '-'}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{group.userCount}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-1\">\n                    <button onClick={() => handleViewMembers(group)} className=\"text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-200 p-1\" title=\"View Members\">\n                      <ViewIcon className=\"h-5 w-5\" />\n                    </button>\n                    <button onClick={() => handleEditGroup(group)} className=\"text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-200 p-1\" title=\"Edit Group\">\n                      <EditIcon className=\"h-5 w-5\" />\n                    </button>\n                    <button onClick={() => handleDeleteGroup(group)} className=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-200 p-1\" title=\"Delete Group\">\n                      <DeleteIcon className=\"h-5 w-5\" />\n                    </button>\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Modals */}\n      <AddEditGroupModal\n        isOpen={isAddEditModalOpen}\n        onClose={() => setIsAddEditModalOpen(false)}\n        group={selectedGroup}\n        onSave={handleSaveGroup}\n      />\n      <ConfirmationModal\n        isOpen={isDeleteModalOpen}\n        onClose={() => { setIsDeleteModalOpen(false); setSelectedGroup(null); }}\n        onConfirm={confirmDeleteGroup}\n        title=\"Confirm Group Deletion\"\n        message={\n          <span>Are you sure you want to delete the group <strong>{selectedGroup?.name}</strong>? This action cannot be undone{selectedGroup?.userCount && selectedGroup.userCount > 0 ? ' and the group currently has members' : ''}.</span>\n        }\n        confirmText=\"Delete\"\n        confirmButtonClass=\"bg-red-600 hover:bg-red-700\"\n      />\n      <ViewMembersModal\n        isOpen={isViewMembersModalOpen}\n        onClose={() => { setIsViewMembersModalOpen(false); setSelectedGroup(null); }}\n        group={selectedGroup}\n        users={allUsers}\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\n\n// Placeholder type for settings\ninterface EssenceSettingsData {\n  maxRewardAmount: number | string; // Use string for input field binding\n  maxFineAmount: number | string;\n  centralFineAccountId: string; // User ID or Email\n  enableGroupActions: boolean;\n}\n\nexport function EssenceSettings() {\n  // Simulate fetching settings - replace with actual data fetching\n  const [settings, setSettings] = useState<EssenceSettingsData>({\n    maxRewardAmount: 1000,\n    maxFineAmount: 500,\n    centralFineAccountId: 'central-fine@example.com', // Placeholder\n    enableGroupActions: true,\n  });\n  const [isEditing, setIsEditing] = useState(false); // To toggle edit mode if needed\n  const [tempSettings, setTempSettings] = useState<EssenceSettingsData>(settings);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value, type } = e.target;\n    const checked = (e.target as HTMLInputElement).checked; // For checkbox\n\n    setTempSettings(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n  };\n\n  const handleSave = () => {\n    // TODO: Add validation (e.g., amounts are numbers, account ID format)\n    console.log(\"Saving Essence Settings:\", tempSettings);\n    setSettings(tempSettings);\n    setIsEditing(false);\n    // TODO: Show success toast\n    // TODO: Call API to save settings\n  };\n\n  const handleCancel = () => {\n    setTempSettings(settings); // Revert changes\n    setIsEditing(false);\n  };\n\n  return (\n    <div className=\"p-4 border rounded-md dark:border-gray-700 bg-white dark:bg-gray-900 shadow-sm\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Essence Settings</h3>\n        {!isEditing && (\n          <button\n            onClick={() => { setTempSettings(settings); setIsEditing(true); }}\n            className=\"text-sm text-blue-600 hover:underline dark:text-blue-400\"\n          >\n            Edit Settings\n          </button>\n        )}\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Max Reward Amount */}\n        <div>\n          <label htmlFor=\"maxRewardAmount\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Maximum Reward Amount</label>\n          <input\n            type=\"number\"\n            id=\"maxRewardAmount\"\n            name=\"maxRewardAmount\"\n            value={isEditing ? tempSettings.maxRewardAmount : settings.maxRewardAmount}\n            onChange={handleInputChange}\n            disabled={!isEditing}\n            className=\"w-full md:w-1/2 px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white disabled:opacity-70 disabled:bg-gray-100 dark:disabled:bg-gray-700\"\n            min=\"0\"\n          />\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">Set the highest amount allowed for a single reward.</p>\n        </div>\n\n        {/* Max Fine Amount */}\n        <div>\n          <label htmlFor=\"maxFineAmount\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Maximum Fine Amount</label>\n          <input\n            type=\"number\"\n            id=\"maxFineAmount\"\n            name=\"maxFineAmount\"\n            value={isEditing ? tempSettings.maxFineAmount : settings.maxFineAmount}\n            onChange={handleInputChange}\n            disabled={!isEditing}\n            className=\"w-full md:w-1/2 px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white disabled:opacity-70 disabled:bg-gray-100 dark:disabled:bg-gray-700\"\n            min=\"0\"\n          />\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">Set the highest amount allowed for a single fine.</p>\n        </div>\n\n        {/* Central Fine Account */}\n        <div>\n          <label htmlFor=\"centralFineAccountId\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Central Fine Account Identifier</label>\n          <input\n            type=\"text\" // Could be email, user ID, etc.\n            id=\"centralFineAccountId\"\n            name=\"centralFineAccountId\"\n            value={isEditing ? tempSettings.centralFineAccountId : settings.centralFineAccountId}\n            onChange={handleInputChange}\n            disabled={!isEditing}\n            placeholder=\"Enter User ID or Email\"\n            className=\"w-full md:w-1/2 px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white disabled:opacity-70 disabled:bg-gray-100 dark:disabled:bg-gray-700\"\n          />\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">Specify the user account where collected fines are sent.</p>\n        </div>\n\n        {/* Enable Group Actions */}\n        <div className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            id=\"enableGroupActions\"\n            name=\"enableGroupActions\"\n            checked={isEditing ? tempSettings.enableGroupActions : settings.enableGroupActions}\n            onChange={handleInputChange}\n            disabled={!isEditing}\n            className=\"h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 disabled:opacity-70\"\n          />\n          <label htmlFor=\"enableGroupActions\" className=\"ml-2 block text-sm text-gray-900 dark:text-gray-300\">\n            Enable Group-Based Economic Actions\n          </label>\n        </div>\n         <p className=\"text-xs text-gray-500 dark:text-gray-400 -mt-3 ml-6\">Allow admins to assign rewards/fines/expenses to entire groups.</p>\n\n        {/* Action Buttons */}\n        {isEditing && (\n          <div className=\"flex justify-end gap-3 pt-4 border-t dark:border-gray-700\">\n            <button\n              onClick={handleCancel}\n              className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={handleSave}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\n            >\n              Save Settings\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useMemo } from 'react'; // Added useMemo import\n\n// --- Icons ---\nfunction DownloadIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/><polyline points=\"7 10 12 15 17 10\"/><line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\"/></svg>\n  );\n}\nfunction UploadIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/><polyline points=\"17 8 12 3 7 8\"/><line x1=\"12\" x2=\"12\" y1=\"3\" y2=\"15\"/></svg>\n  );\n}\nfunction FileTextIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z\"/><path d=\"M14 2v4a2 2 0 0 0 2 2h4\"/><path d=\"M10 9H8\"/><path d=\"M16 13H8\"/><path d=\"M16 17H8\"/></svg>\n  );\n}\nfunction DatabaseIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><ellipse cx=\"12\" cy=\"5\" rx=\"9\" ry=\"3\"/><path d=\"M3 5V19A9 3 0 0 0 21 19V5\"/><path d=\"M3 12A9 3 0 0 0 21 12\"/></svg>\n  );\n}\nfunction ArchiveIcon(props: React.SVGProps<SVGSVGElement>) { // For ZIP\n    return (\n        <svg {...props} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><rect width=\"20\" height=\"5\" x=\"2\" y=\"3\" rx=\"1\"/><path d=\"M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8\"/><path d=\"M10 12h4\"/></svg>\n    )\n}\n\n\n// Placeholder types\ntype ExportModule = 'config' | 'groups' | 'essenceSettings' | 'users' | 'balances' | 'transactions' | 'activityLogs' | 'economySetup';\ntype ExportFormat = 'json' | 'csv';\ntype ImportMode = 'merge' | 'overwrite';\n\ninterface AuditLogEntry {\n  id: string;\n  actionType: 'Import' | 'Export';\n  fileName?: string; // For import/export of single files\n  modules?: ExportModule[]; // For export all / zip\n  performedBy: string; // User ID or Name\n  timestamp: string;\n  status: 'Success' | 'Partial Success' | 'Failed';\n  details?: string; // Error messages or summary\n}\n\nexport function BackupRestore() {\n  // Export State\n  const [exportModules, setExportModules] = useState<ExportModule[]>([]);\n  const [exportFormat, setExportFormat] = useState<ExportFormat>('json');\n  const [includeLogs, setIncludeLogs] = useState(false);\n\n  // Import State\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [importFileName, setImportFileName] = useState('');\n  const [importModule, setImportModule] = useState<ExportModule | ''>(''); // Which module the file corresponds to\n  const [importMode, setImportMode] = useState<ImportMode>('merge');\n  const [importPreview, setImportPreview] = useState<any>(null); // Placeholder for preview data\n  const [importErrors, setImportErrors] = useState<string[]>([]);\n\n  // Audit Log State\n  const [auditLog, setAuditLog] = useState<AuditLogEntry[]>([\n    // Placeholder data\n    { id: 'log1', actionType: 'Export', modules: ['config', 'groups'], performedBy: 'Super Admin', timestamp: new Date(Date.now() - 86400000).toISOString(), status: 'Success' },\n    { id: 'log2', actionType: 'Import', fileName: 'users_import_v2.csv', performedBy: 'Super Admin', timestamp: new Date().toISOString(), status: 'Failed', details: 'Row 15: Invalid email format. Row 22: User ID not found.' },\n  ]);\n  const [filterDate, setFilterDate] = useState('');\n  const [filterAction, setFilterAction] = useState<'Import' | 'Export' | ''>('');\n\n\n  // --- Placeholder Handlers ---\n  const handleExportSelection = (module: ExportModule, type: 'config' | 'full') => {\n    // Basic logic to handle selection - needs refinement for exclusive choices etc.\n    setExportModules(prev => {\n        if (type === 'config') {\n            // Allow selecting individual config items\n            return prev.includes(module) ? prev.filter(m => m !== module) : [...prev, module];\n        } else {\n             // Allow selecting individual full data items (excluding logs initially)\n             if (module === 'activityLogs') return prev; // Handled by separate checkbox\n             return prev.includes(module) ? prev.filter(m => m !== module) : [...prev, module];\n        }\n    });\n  };\n\n  const handleExport = (type: 'selected' | 'all_config' | 'all_data' | 'zip') => {\n    // Simulate export file generation\n    console.log(`Exporting... Type: ${type}`);\n    console.log(\"Selected Modules:\", exportModules);\n    console.log(\"Include Logs:\", includeLogs);\n    console.log(\"Format:\", exportFormat);\n\n    let modulesToExport: ExportModule[] = [];\n    if (type === 'selected') modulesToExport = exportModules;\n    if (type === 'all_config') modulesToExport = ['config', 'groups', 'essenceSettings']; // Define what 'config' means\n    // FIX: Corrected conditional spread syntax\n    if (type === 'all_data') modulesToExport = ['users', 'balances', 'transactions', 'economySetup', ...(includeLogs ? ['activityLogs'] : [])]; // Define what 'data' means\n    // FIX: Corrected conditional spread syntax\n    if (type === 'zip') modulesToExport = ['config', 'groups', 'essenceSettings', 'users', 'balances', 'transactions', 'economySetup', ...(includeLogs ? ['activityLogs'] : [])]; // All\n\n    if (modulesToExport.length === 0 && type === 'selected') {\n        alert(\"Please select at least one module to export.\");\n        return;\n    }\n\n    // TODO: Generate mock data based on selection and format\n    // TODO: Trigger file download (single file or zip)\n    // TODO: Add entry to Audit Log\n    alert(`Placeholder: Export initiated for ${type} (${modulesToExport.join(', ')}) as ${exportFormat}. Check console.`);\n    // Add mock audit log entry\n    setAuditLog(prev => [{\n        id: `log${Date.now()}`,\n        actionType: 'Export',\n        modules: modulesToExport,\n        performedBy: 'Current Super Admin', // Get actual user later\n        timestamp: new Date().toISOString(),\n        status: 'Success', // Assume success for placeholder\n    }, ...prev]);\n  };\n\n  const handleImportFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      setImportFile(file);\n      setImportFileName(file.name);\n      setImportPreview(null); // Reset preview\n      setImportErrors([]);\n      // Try to guess module from filename? Or require selection?\n      // For now, require selection via dropdown.\n    }\n  };\n\n  const handleImport = () => {\n    if (!importFile || !importModule) {\n      alert(\"Please select a file and the corresponding data module to import.\");\n      return;\n    }\n    console.log(`Importing file: ${importFileName}`);\n    console.log(`Module: ${importModule}`);\n    console.log(`Mode: ${importMode}`);\n\n    // TODO: Read file content (FileReader)\n    // TODO: Parse data (JSON/CSV)\n    // TODO: Validate data structure and content\n    // TODO: Show preview (first few rows?)\n    // TODO: Show validation errors\n    // TODO: If valid, show confirmation for 'overwrite' mode\n    // TODO: Simulate merge/overwrite action\n    // TODO: Add entry to Audit Log\n\n    alert(`Placeholder: Import initiated for ${importModule} from ${importFileName} (Mode: ${importMode}). Check console.`);\n    // Add mock audit log entry\n     setAuditLog(prev => [{\n        id: `log${Date.now()}`,\n        actionType: 'Import',\n        fileName: importFileName,\n        modules: [importModule],\n        performedBy: 'Current Super Admin', // Get actual user later\n        timestamp: new Date().toISOString(),\n        status: 'Success', // Assume success for placeholder\n    }, ...prev]);\n     // Reset import form\n     setImportFile(null);\n     setImportFileName('');\n     setImportModule('');\n     setImportPreview(null);\n     setImportErrors([]);\n  };\n\n  const filteredAuditLog = useMemo(() => {\n    return auditLog.filter(log => {\n        const dateMatch = !filterDate || log.timestamp.startsWith(filterDate);\n        const actionMatch = !filterAction || log.actionType === filterAction;\n        return dateMatch && actionMatch;\n    });\n  }, [auditLog, filterDate, filterAction]);\n\n\n  return (\n    <div className=\"p-4 border rounded-md dark:border-gray-700 bg-white dark:bg-gray-900 shadow-sm space-y-8\">\n      {/* Export Section */}\n      <section>\n        <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">Export Data</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Configuration Export */}\n          <div className=\"p-4 border rounded dark:border-gray-600\">\n            <h4 className=\"font-medium mb-2 flex items-center gap-2\"><FileTextIcon className=\"w-5 h-5\"/>Configuration Modules</h4>\n            <div className=\"space-y-2 text-sm\">\n              {/* Add checkboxes for config modules */}\n              <label className=\"flex items-center gap-2\">\n                <input type=\"checkbox\" checked={exportModules.includes('groups')} onChange={() => handleExportSelection('groups', 'config')} className=\"form-checkbox h-4 w-4 text-blue-600\"/> Groups\n              </label>\n              <label className=\"flex items-center gap-2\">\n                <input type=\"checkbox\" checked={exportModules.includes('essenceSettings')} onChange={() => handleExportSelection('essenceSettings', 'config')} className=\"form-checkbox h-4 w-4 text-blue-600\"/> Essence Settings\n              </label>\n               {/* Add more config modules as needed */}\n            </div>\n             <button\n                onClick={() => handleExport('all_config')}\n                className=\"mt-3 inline-flex items-center gap-1 px-3 py-1 bg-gray-500 text-white rounded hover:bg-gray-600 text-xs\"\n             >\n                <DownloadIcon className=\"h-3 w-3\" /> Export All Config\n             </button>\n          </div>\n\n          {/* Full Data Export */}\n          <div className=\"p-4 border rounded dark:border-gray-600\">\n            <h4 className=\"font-medium mb-2 flex items-center gap-2\"><DatabaseIcon className=\"w-5 h-5\"/>Full Data Modules</h4>\n            <div className=\"space-y-2 text-sm\">\n              {/* Add checkboxes for data modules */}\n               <label className=\"flex items-center gap-2\">\n                <input type=\"checkbox\" checked={exportModules.includes('users')} onChange={() => handleExportSelection('users', 'full')} className=\"form-checkbox h-4 w-4 text-blue-600\"/> Users\n              </label>\n               <label className=\"flex items-center gap-2\">\n                <input type=\"checkbox\" checked={exportModules.includes('balances')} onChange={() => handleExportSelection('balances', 'full')} className=\"form-checkbox h-4 w-4 text-blue-600\"/> User Balances\n              </label>\n               <label className=\"flex items-center gap-2\">\n                <input type=\"checkbox\" checked={exportModules.includes('transactions')} onChange={() => handleExportSelection('transactions', 'full')} className=\"form-checkbox h-4 w-4 text-blue-600\"/> Transactions\n              </label>\n               <label className=\"flex items-center gap-2\">\n                <input type=\"checkbox\" checked={exportModules.includes('economySetup')} onChange={() => handleExportSelection('economySetup', 'full')} className=\"form-checkbox h-4 w-4 text-blue-600\"/> Economy Setup (Activities/Expenses)\n              </label>\n              <hr className=\"my-2 dark:border-gray-600\"/>\n               <label className=\"flex items-center gap-2\">\n                <input type=\"checkbox\" checked={includeLogs} onChange={(e) => setIncludeLogs(e.target.checked)} className=\"form-checkbox h-4 w-4 text-blue-600\"/> Include Activity Logs (Optional)\n              </label>\n            </div>\n             <button\n                onClick={() => handleExport('all_data')}\n                className=\"mt-3 inline-flex items-center gap-1 px-3 py-1 bg-gray-500 text-white rounded hover:bg-gray-600 text-xs\"\n             >\n                <DownloadIcon className=\"h-3 w-3\" /> Export All Data\n             </button>\n          </div>\n        </div>\n\n        {/* Export Controls */}\n        <div className=\"mt-4 flex flex-col sm:flex-row items-start sm:items-center gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-md border dark:border-gray-700\">\n           <div className=\"flex-shrink-0\">\n             <label htmlFor=\"exportFormat\" className=\"text-sm font-medium mr-2\">Format:</label>\n             <select\n                id=\"exportFormat\"\n                value={exportFormat}\n                onChange={(e) => setExportFormat(e.target.value as ExportFormat)}\n                className=\"px-3 py-1 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white text-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n             >\n                <option value=\"json\">JSON</option>\n                <option value=\"csv\">CSV</option>\n             </select>\n           </div>\n           <div className=\"flex-grow flex flex-wrap gap-2\">\n             <button\n                onClick={() => handleExport('selected')}\n                disabled={exportModules.length === 0}\n                className=\"inline-flex items-center gap-1 px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm disabled:opacity-50 disabled:cursor-not-allowed\"\n             >\n                <DownloadIcon className=\"h-4 w-4\" /> Export Selected ({exportModules.length})\n             </button>\n              <button\n                onClick={() => handleExport('zip')}\n                className=\"inline-flex items-center gap-1 px-3 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm\"\n             >\n                <ArchiveIcon className=\"h-4 w-4\" /> Download All as ZIP\n             </button>\n           </div>\n        </div>\n      </section>\n\n      <hr className=\"dark:border-gray-700\"/>\n\n      {/* Import Section */}\n      <section>\n        <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">Import Data</h3>\n        <div className=\"p-4 border rounded dark:border-gray-600 bg-gray-50 dark:bg-gray-800\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-end\">\n            {/* File Upload */}\n            <div>\n              <label htmlFor=\"importFile\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Select File (.json or .csv)</label>\n              <input\n                type=\"file\"\n                id=\"importFile\"\n                accept=\".json,.csv\"\n                onChange={handleImportFileChange}\n                className=\"block w-full text-sm text-gray-500 dark:text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 dark:file:bg-gray-700 dark:file:text-gray-200 dark:hover:file:bg-gray-600\"\n              />\n              {importFileName && <p className=\"text-xs mt-1 text-gray-600 dark:text-gray-400 truncate\">Selected: {importFileName}</p>}\n            </div>\n\n            {/* Module Selection */}\n            <div>\n              <label htmlFor=\"importModule\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Data Module</label>\n              <select\n                id=\"importModule\"\n                value={importModule}\n                onChange={(e) => setImportModule(e.target.value as ExportModule | '')}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n              >\n                <option value=\"\" disabled>Select module...</option>\n                <option value=\"users\">Users</option>\n                <option value=\"balances\">User Balances</option>\n                <option value=\"transactions\">Transactions</option>\n                <option value=\"groups\">Groups</option>\n                <option value=\"economySetup\">Economy Setup (Activities/Expenses)</option>\n                 {/* Add other importable modules */}\n              </select>\n            </div>\n\n            {/* Import Mode & Button */}\n            <div className=\"flex flex-col sm:flex-row items-start sm:items-end gap-2\">\n               <div>\n                 <label htmlFor=\"importMode\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">Import Mode</label>\n                 <select\n                    id=\"importMode\"\n                    value={importMode}\n                    onChange={(e) => setImportMode(e.target.value as ImportMode)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 text-sm\"\n                 >\n                    <option value=\"merge\">Merge with existing</option>\n                    <option value=\"overwrite\">Overwrite existing</option>\n                 </select>\n               </div>\n               <button\n                  onClick={handleImport}\n                  disabled={!importFile || !importModule}\n                  className=\"w-full sm:w-auto inline-flex items-center justify-center gap-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm disabled:opacity-50 disabled:cursor-not-allowed\"\n               >\n                  <UploadIcon className=\"h-4 w-4\" /> Import\n               </button>\n            </div>\n          </div>\n           {/* Placeholder for Preview/Validation */}\n           {importErrors.length > 0 && (\n             <div className=\"mt-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded text-sm\">\n                <p className=\"font-medium mb-1\">Import Validation Errors:</p>\n                <ul className=\"list-disc list-inside text-xs\">\n                    {importErrors.map((err, i) => <li key={i}>{err}</li>)}\n                </ul>\n             </div>\n           )}\n           {importPreview && (\n              <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 text-blue-800 rounded text-sm\">\n                <p className=\"font-medium mb-1\">Import Preview:</p>\n                <pre className=\"text-xs max-h-40 overflow-auto bg-white dark:bg-gray-900 p-2 rounded\">{JSON.stringify(importPreview, null, 2)}</pre>\n             </div>\n           )}\n           <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">Note: 'Overwrite' mode requires confirmation. Validation checks headers, data types, and references (e.g., User IDs). Preview shows sample data before import.</p>\n        </div>\n      </section>\n\n       <hr className=\"dark:border-gray-700\"/>\n\n      {/* Audit Trail Section */}\n      <section>\n        <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">Import/Export Audit Trail</h3>\n         {/* Filters */}\n         <div className=\"flex flex-wrap gap-4 mb-4\">\n             <div>\n                <label htmlFor=\"filterDate\" className=\"text-sm font-medium mr-2\">Date:</label>\n                <input\n                    type=\"date\"\n                    id=\"filterDate\"\n                    value={filterDate}\n                    onChange={(e) => setFilterDate(e.target.value)}\n                    className=\"px-3 py-1 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white text-sm\"\n                />\n             </div>\n             <div>\n                <label htmlFor=\"filterAction\" className=\"text-sm font-medium mr-2\">Action:</label>\n                <select\n                    id=\"filterAction\"\n                    value={filterAction}\n                    onChange={(e) => setFilterAction(e.target.value as 'Import' | 'Export' | '')}\n                    className=\"px-3 py-1 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white text-sm\"\n                >\n                    <option value=\"\">All Actions</option>\n                    <option value=\"Import\">Import</option>\n                    <option value=\"Export\">Export</option>\n                </select>\n             </div>\n         </div>\n\n        {/* Audit Log Table */}\n        <div className=\"overflow-x-auto border rounded dark:border-gray-700\">\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n            <thead className=\"bg-gray-50 dark:bg-gray-800\">\n              <tr>\n                <th scope=\"col\" className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Timestamp</th>\n                <th scope=\"col\" className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Action</th>\n                <th scope=\"col\" className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Details</th>\n                <th scope=\"col\" className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Performed By</th>\n                <th scope=\"col\" className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-400\">Status</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200 dark:bg-gray-900 dark:divide-gray-700\">\n              {filteredAuditLog.length === 0 ? (\n                <tr>\n                  <td colSpan={5} className=\"px-4 py-3 text-center text-sm text-gray-500 dark:text-gray-400\">\n                    No audit log entries found matching your criteria.\n                  </td>\n                </tr>\n              ) : (\n                filteredAuditLog.map((log) => (\n                  <tr key={log.id}>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{new Date(log.timestamp).toLocaleString()}</td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm font-medium\">\n                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${log.actionType === 'Import' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'}`}>\n                            {log.actionType}\n                        </span>\n                    </td>\n                    <td className=\"px-4 py-3 text-sm text-gray-500 dark:text-gray-400\">\n                        {log.fileName ? `File: ${log.fileName}` : ''}\n                        {log.modules ? ` Modules: ${log.modules.join(', ')}` : ''}\n                        {log.details ? <p className=\"text-xs text-red-600 dark:text-red-400 mt-1\">{log.details}</p> : ''}\n                    </td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{log.performedBy}</td>\n                    <td className=\"px-4 py-3 whitespace-nowrap text-sm\">\n                       <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${log.status === 'Success' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : log.status === 'Failed' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'}`}>\n                         {log.status}\n                       </span>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </section>\n    </div>\n  );\n}\n","import type { MetaFunction } from \"@remix-run/node\";\nimport { useState, useEffect } from \"react\";\nimport { useUserRole } from \"~/hooks/useUserRole\";\nimport { AccessDenied } from \"~/components/AccessDenied\";\nimport { cn } from \"~/lib/utils\";\nimport { UsersTabContent } from \"~/components/admin/UsersTabContent\";\n// Import the new Master tab components\nimport { GroupsManagement } from \"~/components/admin/GroupsManagement\";\nimport { EssenceSettings } from \"~/components/admin/EssenceSettings\";\nimport { BackupRestore } from \"~/components/admin/BackupRestore\";\n\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Life Economy - Admin\" },\n    { name: \"description\", content: \"Admin section for Life Economy\" },\n  ];\n};\n\n// --- Icons for Tabs ---\nfunction UsersIcon(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\" />\n      <circle cx=\"9\" cy=\"7\" r=\"4\" />\n      <path d=\"M22 21v-2a4 4 0 0 0-3-3.87\" />\n      <path d=\"M16 3.13a4 4 0 0 1 0 7.75\" />\n    </svg>\n  );\n}\n\nfunction SettingsIcon(props: React.SVGProps<SVGSVGElement>) { // Using Settings icon for \"Master\"\n  return (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 .54 1.73v.5c0 .83-.44 1.56-1.17 1.95l-.15.08a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.38a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1.17-1.95v-.5c0-.83.44-1.56 1.17-1.95l.15-.08a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z\" />\n      <circle cx=\"12\" cy=\"12\" r=\"3\" />\n    </svg>\n  );\n}\n\n// --- Tab Content Components ---\n\n// Updated MasterTabContent to include the new subsections\nfunction MasterTabContent() {\n  return (\n    <div className=\"p-4 border rounded-b-md dark:border-gray-700 bg-gray-50 dark:bg-gray-950 space-y-6\">\n       {/* Wrap each section in a container if needed for styling */}\n       <GroupsManagement />\n       <EssenceSettings />\n       <BackupRestore />\n    </div>\n  );\n}\n\n// --- Main Admin Component ---\ntype AdminTab = \"users\" | \"master\";\n\nexport default function Admin() {\n  const userRole = useUserRole();\n  const [activeTab, setActiveTab] = useState<AdminTab>(\"users\");\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true); // Set client flag after mount to avoid hydration issues with role check\n  }, []);\n\n  // Render Access Denied if not Super Admin or still hydrating\n  if (!isClient || userRole !== 'Super Admin') {\n    // Show loading or null during hydration check if preferred\n    if (!isClient) return null;\n    return <AccessDenied requiredRole=\"Super Admin\" />;\n  }\n\n  // Render Admin content if Super Admin\n  const renderContent = () => {\n    switch (activeTab) {\n      case \"users\":\n        return <UsersTabContent />;\n      case \"master\":\n        return <MasterTabContent />; // Render the updated Master tab content\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 md:p-6\">\n      <h1 className=\"text-2xl font-semibold mb-6 text-gray-900 dark:text-white\">Admin Console</h1>\n\n      {/* Tab Navigation */}\n      <div className=\"flex border-b border-gray-200 dark:border-gray-700\">\n        <button\n          onClick={() => setActiveTab(\"users\")}\n          className={cn(\n            \"flex items-center gap-2 px-4 py-3 -mb-px border-b-2 text-sm font-medium focus:outline-none\",\n            activeTab === \"users\"\n              ? \"border-blue-600 text-blue-600 dark:border-blue-500 dark:text-blue-500\"\n              : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-200 dark:hover:border-gray-600\"\n          )}\n        >\n          <UsersIcon className=\"h-5 w-5\" />\n          Users\n        </button>\n        <button\n          onClick={() => setActiveTab(\"master\")}\n          className={cn(\n            \"flex items-center gap-2 px-4 py-3 -mb-px border-b-2 text-sm font-medium focus:outline-none\",\n            activeTab === \"master\"\n              ? \"border-blue-600 text-blue-600 dark:border-blue-500 dark:text-blue-500\"\n              : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-200 dark:hover:border-gray-600\"\n          )}\n        >\n          <SettingsIcon className=\"h-5 w-5\" />\n          Master\n        </button>\n      </div>\n\n      {/* Tab Content Area */}\n      <div className=\"mt-0\"> {/* Remove top margin to connect content to tabs */}\n        {renderContent()}\n      </div>\n    </div>\n  );\n}\n"],"names":["meta","DownloadIcon","FileTextIcon","SearchIcon","startIndex","endIndex","CheckCircleIcon","UsersIcon","EditIcon","activityName","expenseName","ViewIcon","DeleteIcon","_a","UploadIcon","PlusIcon"],"mappings":"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"}